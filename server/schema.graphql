type Query {
#  获取个人信息
  me: mePayload
#  获取单一用户信息
  getUser(UID:String!): getUserPayload
  getUsers(skip: Int, first: Int): getUsersPayload
  getFollowers(skip: Int, first: Int, count: Boolean): getFollowersPayload
  getAttentions(skip: Int, first: Int, count: Boolean): getAttentionsPayload
  getSubscribes(skip: Int, first: Int, count: Boolean): getSubscribesPayload
  getSetting: getSettingPayload
  getWallet: getWalletPayload
  getCount: getCountPayload

  getMoments(skip: Int, first: Int, UID: String): getMomentsPayload
# 持仓账户信息
  getPositionInfo(UID: String): getPositionInfoPayload
# 查询账单流水
  getLedger(UID: String, after: String): getLedgerPayload
# 查询资产
  getProperty(UID: String!): getPropertyPayload
# 合约持仓信息
  getContractInfo(UID: String!): getContractInfoPayload

  getCloseout(skip: Int, first: Int): [getCloseoutPayload]
  getUsdtMessage: getUsdtMessagePayload
  getMycoin: [getMycoinPayload]
  getBattle: getBattlePayload
  getOnchainexchange: getOnchainexchangePayload
  getBtcplaceorder: getBtcplaceorderPayload
  getDistribution: getDistributionPayload
  getCloseoutSummary: [getCloseoutSummaryPayload]
}

type Mutation {
  changeIntroduction(introduction:String): changeintroductionPayload
  changenickName(nickName:String): changenickNamePayload
  changeOKEXInfo(apiKey:String, apiSecret:String, passPhrase:String): changeOKEXInfoPayload
  login(phoneNumber: String!, sms: String!): loginPayload
  getMessage: getMessagePayload
  subscribe(UID:String!) : subscribePayload
  cancelsubscribe(UID:String!): cancelsubscribePayload

  changeSubscribeCost(cost:String!): changeSubscribeCostPayload
  changeSetting(assetsSetting:Int, positionSetting:Int, actionSetting:Int): changeSettingPayload

  attentionTo(UID:String!): attentionToPayload
  cancelAttention(UID:String!): cancelAttentionPayload

  createMoment(title:String, content:String): createMomentPayload
}

type getUsdtMessagePayload {
  price: Float
  exchangeRate: Float
  premium: Float
}

type getMycoinPayload {
  coin_name: String
  coin_price: Float
}

type getCloseoutSummaryPayload {
  coin: String
  loss: Int
  percentage: Float
}

type getDistributionPayload {
  arrangeData: [arrangeData]
  ups: Int
  downs: Int
}

type arrangeData {
  arrange: Int
  count: Int
}

type getBtcplaceorderPayload {
  long: Int
  longDeal: Int
  longDealAmount: Int
  short: Int
  shortDeal: Int
  shortDealAmount: Int
}

type getOnchainexchangePayload {
  btc: Int
  eth: Int
  usdt: Int
}

type getBattlePayload {
  longOKex: Float
  shortOKex: Float
  longHuobi: Float
  shortHuobi: Float
  longBitMex: Float
  shortBitMex: Float
}

type getOnchainexangePayload {
  btc: Int
  eth: Int
  usdt: Int
}

type getCloseoutPayload {
  timestamp: Int
  exchange: String
  contract_name: String
  contract_type: String
  closeout_type: String
  contract_price: String
  amount: String
  price: String
}

type loginPayload {
  isSuccess: String
  errMessage: String
  token: String
}

type getMessagePayload {
  isSuccess:Boolean
  errMessage:String
}

type cancelsubscribePayload {
  isSuccess:Boolean
  errMessage:String
}

type subscribePayload {
  isSuccess:Boolean
  errMessage:String
}

type changeintroductionPayload {
  isSuccess:Boolean
  errMessage:String
}

type changenickNamePayload {
  isSuccess:Boolean
  errMessage:String
}

type changeSubscribeCostPayload {
  isSuccess:Boolean
  errMessage:String
}

type changeSettingPayload {
  isSuccess:Boolean
  errMessage:String
}

type changeOKEXInfoPayload {
  isSuccess:Boolean
  errMessage:String
}

type user {
  id: String
  phoneNumber: String
  nickName: String
  address: String
  introduction: String
  apiKey: String
  apiSecret: String
  passPhrase: String
  subscribeCost: String
  totalProperty: String
  leverage: Float
  type: String
  totalEarnRate: Float
  totalEarnValue: Float
  followed: Boolean
  subscribed: Boolean
}

type getSettingPayload {
  isSuccess:Boolean
  errMessage:String
  assetsSetting: Int
  positionSetting: Int
  actionSetting: Int
}

type mePayload {
  isSuccess:Boolean
  errMessage:String
  user:user
}

type getUserPayload {
  isSuccess:Boolean
  errMessage:String
  user:user
}

type getUsersPayload {
  isSuccess:Boolean
  errMessage:String
  users:[user]
}

type getSubscribesPayload {
  isSuccess:Boolean
  errMessage:String
  users:[user]
}

type attentionToPayload {
  isSuccess:Boolean
  errMessage:String
}

type cancelAttentionPayload {
  isSuccess:Boolean
  errMessage:String
}

type getFollowersPayload {
  isSuccess:Boolean
  errMessage:String
  users:[user]
}

type getWalletPayload {
  isSuccess:Boolean
  errMessage:String
  balance:String
}

type getAttentionsPayload {
  isSuccess:Boolean
  errMessage:String
  users:[user]
}

type createMomentPayload {
  isSuccess:Boolean
  errMessage:String
}

type moment {
  user:user
  createdAt:String
  title:String
  content:String
}

type getMomentsPayload {
  isSuccess:Boolean
  errMessage:String
  moments:[moment]
}

type assets {
  available:String
  balance:String
  currency:String
  hold:String
  cost:String
  price:String
  totalprice:String
}

type getPositionInfoPayload {
  isSuccess:Boolean
  errMessage:String
  assetses:[assets]
}

type ledger {
  order_id:String
  client_oid:String
  price:String
  size:String
  notional:String
  instrument_id:String
  type:String
  side:String
  timestamp:String
  filled_size:String
  filled_notional:String
  order_type:String
  state:String
  price_avg:String
}

type getLedgerPayload {
  isSuccess:Boolean
  errMessage:String
  ledgers:[ledger]
}

type getPropertyPayload {
  isSuccess:Boolean
  errMessage:String
  totalProperty:String
  earnRate:Float
  totalEarning:Float
  winRate:Float
  duration:String
  weeklyEarning:Float
  weeklyWinRate:Float
  frequency:String
}

type contractInfo {
  margin_mode:String
  liquidation_price:String
  position:String
  avail_position:String
  margin:String
  avg_cost:String
  settlement_price:String
  instrument_id:String
  leverage:String
  realized_pnl:String
  side:String
  timestamp:String
  maint_margin_ratio:String
  settled_pnl:String
  last:String
  unrealized_pnl:String
}

type getContractInfoPayload {
  isSuccess:Boolean
  errMessage:String
  contractInfo:[contractInfo]
}

type getCountPayload {
  isSuccess:Boolean
  errMessage:String
  subscribeCount:String
  followerCount:String
  attentionCount:String
}