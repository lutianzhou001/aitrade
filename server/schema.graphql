type Query {
#  获取个人信息
  me: mePayload
#  获取单一用户信息
  getUser(UID:String!): getUserPayload
  getUsers(skip: Int, first: Int): getUsersPayload
  getFollowers(skip: Int, first: Int): getFollowersPayload
  getAttentions(skip: Int, first: Int): getAttentionsPayload

  getMoments(skip: Int, first: Int, UID: String): getMomentsPayload

  getWalletInfo: getWalletInfoPayload
}

type Mutation {
  changeIntroduction(introduction:String): changeintroductionPayload
  changenickName(nickName:String): changenickNamePayload
  changeOKEXInfo(apiKey:String, apiSecret:String, passPhrase:String): changeOKEXInfoPayload
  login(phoneNumber: String!, sms: String!): loginPayload
  getMessage: getMessagePayload
  subcribe(UID:String!) : subscribePayload
  cancelsubcribe(UID:String!): cancelsubscribePayload

  attentionTo(UID:String!): attentionToPayload

  createMoment(title:String, content:String): createMomentPayload
}

type loginPayload {
  isSuccess: String
  errMessage: String
  token: String
}

type getMessagePayload {
  isSuccess:Boolean
  errMessage:String
}

type cancelsubscribePayload {
  isSuccess:Boolean
  errMessage:String
}

type subscribePayload { 
  isSuccess:Boolean
  errMessage:String
}

type changeintroductionPayload {
  isSuccess:Boolean
  errMessage:String
}

type changenickNamePayload {
  isSuccess:Boolean
  errMessage:String
}

type changeOKEXInfoPayload {
  isSuccess:Boolean
  errMessage:String
}

type user {
  id: String
  phoneNumber: String
  nickName: String
  address: String
  introduction: String
  apiKey: String
  apiSecret: String
  passPhrase: String
}

type mePayload {
  isSuccess:Boolean
  errMessage:String
  user:user
}

type getUserPayload {
  isSuccess:Boolean
  errMessage:String
  user:user
}

type getUsersPayload {
  isSuccess:Boolean
  errMessage:String
  users:[user]
}

type attentionToPayload {
  isSuccess:Boolean
  errMessage:String
}

type getFollowersPayload {
  isSuccess:Boolean
  errMessage:String
  users:[user]
}

type getAttentionsPayload {
  isSuccess:Boolean
  errMessage:String
  users:[user]
}

type createMomentPayload {
  isSuccess:Boolean
  errMessage:String
}

type moment {
  user:user
  createdAt:String
  title:String
  content:String
}

type getMomentsPayload {
  isSuccess:Boolean
  errMessage:String
  moments:[moment]
}

type assets {
  available:String
  balance:String
  currency:String
  hold:String
  price:String
}

type getWalletInfoPayload {
  isSuccess:Boolean
  errMessage:String
  assetses:[assets]
}