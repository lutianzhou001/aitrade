type User {
	id: ID! @unique
	createdAt: DateTime! @createdAt
	phoneNumber: String!
    nickName: String!
    address: String
	introduction: String!
	moment: Moment
	apiKey: String
	apiSecret: String
	passPhrase: String
	subscribeCost: String
	totalProperty: Float
	totalEarnRate: Float
	totalEarnValue: Float
	setting: Setting
}

type Setting {
	assetsSetting: Int
	positionSetting: Int
	actionSetting: Int
}

type Wallet {
	userId: String
	balance: String
}

type Token {
	tokenID: ID! @unique
    tokenName: String!
	isCopycat:String!
}

type Follow {
    follower: String!
	leader: String!
}

type Subscribe {
	follower: String!
	leader: String!
}

type Transactions {
	from : String!
	to: String!
	value: String!
	type: String!
}

type Moment {
	user: User
	createdAt: DateTime! @createdAt
	title: String
	content: String
}

type Rate {
	key: String @unique
	value: String
}

type Mycoin {
	coin_name: String!
	coin_price: Float!
}

type Battle {
	longOKex: Int
	shortOKex: Int
	longHuobi: Int
	shortHuobi: Int
	longBitMex: Int
	shortBitMex: Int
}

type OnchainExchange {
	btc: Int
	eth: Int
	usdt: Int
}

type BtcPlaceOrder {
	long: Int
	longDeal: Int
	longDealAmount: Int
	short: Int
	shortDeal: Int
	shortDealAmount: Int
}

type Distribution {
	arrange: Int
	count: Int
}


type Onchain {
	from : String!
	to: String!
	amount: String!
	timestamp: Int!
}

type Closeout {
	exchange: String!
	instrument_id: String!
	status: String!
	limit: String!
	from: String!
	to: String!
	price: Float!
}