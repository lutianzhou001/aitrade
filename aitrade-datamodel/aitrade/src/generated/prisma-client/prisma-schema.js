module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Aggregatefollow {
  count: Int!
}

type AggregateToken {
  count: Int!
}

type Aggregatetransactions {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type follow {
  follower: String!
  leader: String!
}

type followConnection {
  pageInfo: PageInfo!
  edges: [followEdge]!
  aggregate: Aggregatefollow!
}

input followCreateInput {
  follower: String!
  leader: String!
}

type followEdge {
  node: follow!
  cursor: String!
}

enum followOrderByInput {
  follower_ASC
  follower_DESC
  leader_ASC
  leader_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type followPreviousValues {
  follower: String!
  leader: String!
}

type followSubscriptionPayload {
  mutation: MutationType!
  node: follow
  updatedFields: [String!]
  previousValues: followPreviousValues
}

input followSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: followWhereInput
  AND: [followSubscriptionWhereInput!]
  OR: [followSubscriptionWhereInput!]
  NOT: [followSubscriptionWhereInput!]
}

input followUpdateManyMutationInput {
  follower: String
  leader: String
}

input followWhereInput {
  follower: String
  follower_not: String
  follower_in: [String!]
  follower_not_in: [String!]
  follower_lt: String
  follower_lte: String
  follower_gt: String
  follower_gte: String
  follower_contains: String
  follower_not_contains: String
  follower_starts_with: String
  follower_not_starts_with: String
  follower_ends_with: String
  follower_not_ends_with: String
  leader: String
  leader_not: String
  leader_in: [String!]
  leader_not_in: [String!]
  leader_lt: String
  leader_lte: String
  leader_gt: String
  leader_gte: String
  leader_contains: String
  leader_not_contains: String
  leader_starts_with: String
  leader_not_starts_with: String
  leader_ends_with: String
  leader_not_ends_with: String
  AND: [followWhereInput!]
  OR: [followWhereInput!]
  NOT: [followWhereInput!]
}

scalar Long

type Mutation {
  createToken(data: TokenCreateInput!): Token!
  updateToken(data: TokenUpdateInput!, where: TokenWhereUniqueInput!): Token
  updateManyTokens(data: TokenUpdateManyMutationInput!, where: TokenWhereInput): BatchPayload!
  upsertToken(where: TokenWhereUniqueInput!, create: TokenCreateInput!, update: TokenUpdateInput!): Token!
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteManyTokens(where: TokenWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createfollow(data: followCreateInput!): follow!
  updateManyfollows(data: followUpdateManyMutationInput!, where: followWhereInput): BatchPayload!
  deleteManyfollows(where: followWhereInput): BatchPayload!
  createtransactions(data: transactionsCreateInput!): transactions!
  updateManytransactionses(data: transactionsUpdateManyMutationInput!, where: transactionsWhereInput): BatchPayload!
  deleteManytransactionses(where: transactionsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  token(where: TokenWhereUniqueInput!): Token
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token]!
  tokensConnection(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TokenConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  follows(where: followWhereInput, orderBy: followOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [follow]!
  followsConnection(where: followWhereInput, orderBy: followOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): followConnection!
  transactionses(where: transactionsWhereInput, orderBy: transactionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [transactions]!
  transactionsesConnection(where: transactionsWhereInput, orderBy: transactionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): transactionsConnection!
  node(id: ID!): Node
}

type Subscription {
  token(where: TokenSubscriptionWhereInput): TokenSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  follow(where: followSubscriptionWhereInput): followSubscriptionPayload
  transactions(where: transactionsSubscriptionWhereInput): transactionsSubscriptionPayload
}

type Token {
  tokenID: ID!
  tokenName: String!
  isCopycat: String!
}

type TokenConnection {
  pageInfo: PageInfo!
  edges: [TokenEdge]!
  aggregate: AggregateToken!
}

input TokenCreateInput {
  tokenID: ID!
  tokenName: String!
  isCopycat: String!
}

type TokenEdge {
  node: Token!
  cursor: String!
}

enum TokenOrderByInput {
  tokenID_ASC
  tokenID_DESC
  tokenName_ASC
  tokenName_DESC
  isCopycat_ASC
  isCopycat_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TokenPreviousValues {
  tokenID: ID!
  tokenName: String!
  isCopycat: String!
}

type TokenSubscriptionPayload {
  mutation: MutationType!
  node: Token
  updatedFields: [String!]
  previousValues: TokenPreviousValues
}

input TokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TokenWhereInput
  AND: [TokenSubscriptionWhereInput!]
  OR: [TokenSubscriptionWhereInput!]
  NOT: [TokenSubscriptionWhereInput!]
}

input TokenUpdateInput {
  tokenID: ID
  tokenName: String
  isCopycat: String
}

input TokenUpdateManyMutationInput {
  tokenID: ID
  tokenName: String
  isCopycat: String
}

input TokenWhereInput {
  tokenID: ID
  tokenID_not: ID
  tokenID_in: [ID!]
  tokenID_not_in: [ID!]
  tokenID_lt: ID
  tokenID_lte: ID
  tokenID_gt: ID
  tokenID_gte: ID
  tokenID_contains: ID
  tokenID_not_contains: ID
  tokenID_starts_with: ID
  tokenID_not_starts_with: ID
  tokenID_ends_with: ID
  tokenID_not_ends_with: ID
  tokenName: String
  tokenName_not: String
  tokenName_in: [String!]
  tokenName_not_in: [String!]
  tokenName_lt: String
  tokenName_lte: String
  tokenName_gt: String
  tokenName_gte: String
  tokenName_contains: String
  tokenName_not_contains: String
  tokenName_starts_with: String
  tokenName_not_starts_with: String
  tokenName_ends_with: String
  tokenName_not_ends_with: String
  isCopycat: String
  isCopycat_not: String
  isCopycat_in: [String!]
  isCopycat_not_in: [String!]
  isCopycat_lt: String
  isCopycat_lte: String
  isCopycat_gt: String
  isCopycat_gte: String
  isCopycat_contains: String
  isCopycat_not_contains: String
  isCopycat_starts_with: String
  isCopycat_not_starts_with: String
  isCopycat_ends_with: String
  isCopycat_not_ends_with: String
  AND: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
}

input TokenWhereUniqueInput {
  tokenID: ID
}

type transactions {
  from: String!
  to: String!
  value: String!
  type: String!
}

type transactionsConnection {
  pageInfo: PageInfo!
  edges: [transactionsEdge]!
  aggregate: Aggregatetransactions!
}

input transactionsCreateInput {
  from: String!
  to: String!
  value: String!
  type: String!
}

type transactionsEdge {
  node: transactions!
  cursor: String!
}

enum transactionsOrderByInput {
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  type_ASC
  type_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type transactionsPreviousValues {
  from: String!
  to: String!
  value: String!
  type: String!
}

type transactionsSubscriptionPayload {
  mutation: MutationType!
  node: transactions
  updatedFields: [String!]
  previousValues: transactionsPreviousValues
}

input transactionsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: transactionsWhereInput
  AND: [transactionsSubscriptionWhereInput!]
  OR: [transactionsSubscriptionWhereInput!]
  NOT: [transactionsSubscriptionWhereInput!]
}

input transactionsUpdateManyMutationInput {
  from: String
  to: String
  value: String
  type: String
}

input transactionsWhereInput {
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  to: String
  to_not: String
  to_in: [String!]
  to_not_in: [String!]
  to_lt: String
  to_lte: String
  to_gt: String
  to_gte: String
  to_contains: String
  to_not_contains: String
  to_starts_with: String
  to_not_starts_with: String
  to_ends_with: String
  to_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  AND: [transactionsWhereInput!]
  OR: [transactionsWhereInput!]
  NOT: [transactionsWhereInput!]
}

type User {
  id: ID!
  phoneNumber: String!
  nickName: String!
  address: String
  introduction: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  phoneNumber: String!
  nickName: String!
  address: String
  introduction: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  nickName_ASC
  nickName_DESC
  address_ASC
  address_DESC
  introduction_ASC
  introduction_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  phoneNumber: String!
  nickName: String!
  address: String
  introduction: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  phoneNumber: String
  nickName: String
  address: String
  introduction: String
}

input UserUpdateManyMutationInput {
  phoneNumber: String
  nickName: String
  address: String
  introduction: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  nickName: String
  nickName_not: String
  nickName_in: [String!]
  nickName_not_in: [String!]
  nickName_lt: String
  nickName_lte: String
  nickName_gt: String
  nickName_gte: String
  nickName_contains: String
  nickName_not_contains: String
  nickName_starts_with: String
  nickName_not_starts_with: String
  nickName_ends_with: String
  nickName_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  introduction: String
  introduction_not: String
  introduction_in: [String!]
  introduction_not_in: [String!]
  introduction_lt: String
  introduction_lte: String
  introduction_gt: String
  introduction_gte: String
  introduction_contains: String
  introduction_not_contains: String
  introduction_starts_with: String
  introduction_not_starts_with: String
  introduction_ends_with: String
  introduction_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    