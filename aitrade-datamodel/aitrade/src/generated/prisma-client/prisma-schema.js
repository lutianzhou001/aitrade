module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateFollow {
  count: Int!
}

type AggregateMoment {
  count: Int!
}

type Aggregaterate {
  count: Int!
}

type AggregateToken {
  count: Int!
}

type AggregateTransactions {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Follow {
  follower: String!
  leader: String!
}

type FollowConnection {
  pageInfo: PageInfo!
  edges: [FollowEdge]!
  aggregate: AggregateFollow!
}

input FollowCreateInput {
  follower: String!
  leader: String!
}

type FollowEdge {
  node: Follow!
  cursor: String!
}

enum FollowOrderByInput {
  follower_ASC
  follower_DESC
  leader_ASC
  leader_DESC
}

type FollowPreviousValues {
  follower: String!
  leader: String!
}

type FollowSubscriptionPayload {
  mutation: MutationType!
  node: Follow
  updatedFields: [String!]
  previousValues: FollowPreviousValues
}

input FollowSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FollowWhereInput
  AND: [FollowSubscriptionWhereInput!]
  OR: [FollowSubscriptionWhereInput!]
  NOT: [FollowSubscriptionWhereInput!]
}

input FollowUpdateManyMutationInput {
  follower: String
  leader: String
}

input FollowWhereInput {
  follower: String
  follower_not: String
  follower_in: [String!]
  follower_not_in: [String!]
  follower_lt: String
  follower_lte: String
  follower_gt: String
  follower_gte: String
  follower_contains: String
  follower_not_contains: String
  follower_starts_with: String
  follower_not_starts_with: String
  follower_ends_with: String
  follower_not_ends_with: String
  leader: String
  leader_not: String
  leader_in: [String!]
  leader_not_in: [String!]
  leader_lt: String
  leader_lte: String
  leader_gt: String
  leader_gte: String
  leader_contains: String
  leader_not_contains: String
  leader_starts_with: String
  leader_not_starts_with: String
  leader_ends_with: String
  leader_not_ends_with: String
  AND: [FollowWhereInput!]
  OR: [FollowWhereInput!]
  NOT: [FollowWhereInput!]
}

scalar Long

type Moment {
  user: User
  createdAt: DateTime!
  title: String
  content: String
}

type MomentConnection {
  pageInfo: PageInfo!
  edges: [MomentEdge]!
  aggregate: AggregateMoment!
}

input MomentCreateInput {
  user: UserCreateOneWithoutMomentInput
  title: String
  content: String
}

input MomentCreateOneWithoutUserInput {
  create: MomentCreateWithoutUserInput
}

input MomentCreateWithoutUserInput {
  title: String
  content: String
}

type MomentEdge {
  node: Moment!
  cursor: String!
}

enum MomentOrderByInput {
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type MomentPreviousValues {
  createdAt: DateTime!
  title: String
  content: String
}

type MomentSubscriptionPayload {
  mutation: MutationType!
  node: Moment
  updatedFields: [String!]
  previousValues: MomentPreviousValues
}

input MomentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MomentWhereInput
  AND: [MomentSubscriptionWhereInput!]
  OR: [MomentSubscriptionWhereInput!]
  NOT: [MomentSubscriptionWhereInput!]
}

input MomentUpdateManyMutationInput {
  title: String
  content: String
}

input MomentUpdateOneWithoutUserInput {
  create: MomentCreateWithoutUserInput
  update: MomentUpdateWithoutUserDataInput
  upsert: MomentUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
}

input MomentUpdateWithoutUserDataInput {
  title: String
  content: String
}

input MomentUpsertWithoutUserInput {
  update: MomentUpdateWithoutUserDataInput!
  create: MomentCreateWithoutUserInput!
}

input MomentWhereInput {
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [MomentWhereInput!]
  OR: [MomentWhereInput!]
  NOT: [MomentWhereInput!]
}

type Mutation {
  createFollow(data: FollowCreateInput!): Follow!
  updateManyFollows(data: FollowUpdateManyMutationInput!, where: FollowWhereInput): BatchPayload!
  deleteManyFollows(where: FollowWhereInput): BatchPayload!
  createMoment(data: MomentCreateInput!): Moment!
  updateManyMoments(data: MomentUpdateManyMutationInput!, where: MomentWhereInput): BatchPayload!
  deleteManyMoments(where: MomentWhereInput): BatchPayload!
  createToken(data: TokenCreateInput!): Token!
  updateToken(data: TokenUpdateInput!, where: TokenWhereUniqueInput!): Token
  updateManyTokens(data: TokenUpdateManyMutationInput!, where: TokenWhereInput): BatchPayload!
  upsertToken(where: TokenWhereUniqueInput!, create: TokenCreateInput!, update: TokenUpdateInput!): Token!
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteManyTokens(where: TokenWhereInput): BatchPayload!
  createTransactions(data: TransactionsCreateInput!): Transactions!
  updateManyTransactionses(data: TransactionsUpdateManyMutationInput!, where: TransactionsWhereInput): BatchPayload!
  deleteManyTransactionses(where: TransactionsWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createrate(data: rateCreateInput!): rate!
  updaterate(data: rateUpdateInput!, where: rateWhereUniqueInput!): rate
  updateManyrates(data: rateUpdateManyMutationInput!, where: rateWhereInput): BatchPayload!
  upsertrate(where: rateWhereUniqueInput!, create: rateCreateInput!, update: rateUpdateInput!): rate!
  deleterate(where: rateWhereUniqueInput!): rate
  deleteManyrates(where: rateWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  follows(where: FollowWhereInput, orderBy: FollowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follow]!
  followsConnection(where: FollowWhereInput, orderBy: FollowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FollowConnection!
  moments(where: MomentWhereInput, orderBy: MomentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Moment]!
  momentsConnection(where: MomentWhereInput, orderBy: MomentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MomentConnection!
  token(where: TokenWhereUniqueInput!): Token
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token]!
  tokensConnection(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TokenConnection!
  transactionses(where: TransactionsWhereInput, orderBy: TransactionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transactions]!
  transactionsesConnection(where: TransactionsWhereInput, orderBy: TransactionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionsConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  rate(where: rateWhereUniqueInput!): rate
  rates(where: rateWhereInput, orderBy: rateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [rate]!
  ratesConnection(where: rateWhereInput, orderBy: rateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): rateConnection!
  node(id: ID!): Node
}

type rate {
  key: String
  value: String
}

type rateConnection {
  pageInfo: PageInfo!
  edges: [rateEdge]!
  aggregate: Aggregaterate!
}

input rateCreateInput {
  key: String
  value: String
}

type rateEdge {
  node: rate!
  cursor: String!
}

enum rateOrderByInput {
  key_ASC
  key_DESC
  value_ASC
  value_DESC
}

type ratePreviousValues {
  key: String
  value: String
}

type rateSubscriptionPayload {
  mutation: MutationType!
  node: rate
  updatedFields: [String!]
  previousValues: ratePreviousValues
}

input rateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: rateWhereInput
  AND: [rateSubscriptionWhereInput!]
  OR: [rateSubscriptionWhereInput!]
  NOT: [rateSubscriptionWhereInput!]
}

input rateUpdateInput {
  key: String
  value: String
}

input rateUpdateManyMutationInput {
  key: String
  value: String
}

input rateWhereInput {
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [rateWhereInput!]
  OR: [rateWhereInput!]
  NOT: [rateWhereInput!]
}

input rateWhereUniqueInput {
  key: String
}

type Subscription {
  follow(where: FollowSubscriptionWhereInput): FollowSubscriptionPayload
  moment(where: MomentSubscriptionWhereInput): MomentSubscriptionPayload
  token(where: TokenSubscriptionWhereInput): TokenSubscriptionPayload
  transactions(where: TransactionsSubscriptionWhereInput): TransactionsSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  rate(where: rateSubscriptionWhereInput): rateSubscriptionPayload
}

type Token {
  tokenID: ID!
  tokenName: String!
  isCopycat: String!
}

type TokenConnection {
  pageInfo: PageInfo!
  edges: [TokenEdge]!
  aggregate: AggregateToken!
}

input TokenCreateInput {
  tokenID: ID!
  tokenName: String!
  isCopycat: String!
}

type TokenEdge {
  node: Token!
  cursor: String!
}

enum TokenOrderByInput {
  tokenID_ASC
  tokenID_DESC
  tokenName_ASC
  tokenName_DESC
  isCopycat_ASC
  isCopycat_DESC
}

type TokenPreviousValues {
  tokenID: ID!
  tokenName: String!
  isCopycat: String!
}

type TokenSubscriptionPayload {
  mutation: MutationType!
  node: Token
  updatedFields: [String!]
  previousValues: TokenPreviousValues
}

input TokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TokenWhereInput
  AND: [TokenSubscriptionWhereInput!]
  OR: [TokenSubscriptionWhereInput!]
  NOT: [TokenSubscriptionWhereInput!]
}

input TokenUpdateInput {
  tokenID: ID
  tokenName: String
  isCopycat: String
}

input TokenUpdateManyMutationInput {
  tokenID: ID
  tokenName: String
  isCopycat: String
}

input TokenWhereInput {
  tokenID: ID
  tokenID_not: ID
  tokenID_in: [ID!]
  tokenID_not_in: [ID!]
  tokenID_lt: ID
  tokenID_lte: ID
  tokenID_gt: ID
  tokenID_gte: ID
  tokenID_contains: ID
  tokenID_not_contains: ID
  tokenID_starts_with: ID
  tokenID_not_starts_with: ID
  tokenID_ends_with: ID
  tokenID_not_ends_with: ID
  tokenName: String
  tokenName_not: String
  tokenName_in: [String!]
  tokenName_not_in: [String!]
  tokenName_lt: String
  tokenName_lte: String
  tokenName_gt: String
  tokenName_gte: String
  tokenName_contains: String
  tokenName_not_contains: String
  tokenName_starts_with: String
  tokenName_not_starts_with: String
  tokenName_ends_with: String
  tokenName_not_ends_with: String
  isCopycat: String
  isCopycat_not: String
  isCopycat_in: [String!]
  isCopycat_not_in: [String!]
  isCopycat_lt: String
  isCopycat_lte: String
  isCopycat_gt: String
  isCopycat_gte: String
  isCopycat_contains: String
  isCopycat_not_contains: String
  isCopycat_starts_with: String
  isCopycat_not_starts_with: String
  isCopycat_ends_with: String
  isCopycat_not_ends_with: String
  AND: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
}

input TokenWhereUniqueInput {
  tokenID: ID
}

type Transactions {
  from: String!
  to: String!
  value: String!
  type: String!
}

type TransactionsConnection {
  pageInfo: PageInfo!
  edges: [TransactionsEdge]!
  aggregate: AggregateTransactions!
}

input TransactionsCreateInput {
  from: String!
  to: String!
  value: String!
  type: String!
}

type TransactionsEdge {
  node: Transactions!
  cursor: String!
}

enum TransactionsOrderByInput {
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  type_ASC
  type_DESC
}

type TransactionsPreviousValues {
  from: String!
  to: String!
  value: String!
  type: String!
}

type TransactionsSubscriptionPayload {
  mutation: MutationType!
  node: Transactions
  updatedFields: [String!]
  previousValues: TransactionsPreviousValues
}

input TransactionsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionsWhereInput
  AND: [TransactionsSubscriptionWhereInput!]
  OR: [TransactionsSubscriptionWhereInput!]
  NOT: [TransactionsSubscriptionWhereInput!]
}

input TransactionsUpdateManyMutationInput {
  from: String
  to: String
  value: String
  type: String
}

input TransactionsWhereInput {
  from: String
  from_not: String
  from_in: [String!]
  from_not_in: [String!]
  from_lt: String
  from_lte: String
  from_gt: String
  from_gte: String
  from_contains: String
  from_not_contains: String
  from_starts_with: String
  from_not_starts_with: String
  from_ends_with: String
  from_not_ends_with: String
  to: String
  to_not: String
  to_in: [String!]
  to_not_in: [String!]
  to_lt: String
  to_lte: String
  to_gt: String
  to_gte: String
  to_contains: String
  to_not_contains: String
  to_starts_with: String
  to_not_starts_with: String
  to_ends_with: String
  to_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  AND: [TransactionsWhereInput!]
  OR: [TransactionsWhereInput!]
  NOT: [TransactionsWhereInput!]
}

type User {
  id: ID!
  createdAt: DateTime!
  phoneNumber: String!
  nickName: String!
  address: String
  introduction: String!
  moment: Moment
  apiKey: String
  apiSecret: String
  passPhrase: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  phoneNumber: String!
  nickName: String!
  address: String
  introduction: String!
  moment: MomentCreateOneWithoutUserInput
  apiKey: String
  apiSecret: String
  passPhrase: String
}

input UserCreateOneWithoutMomentInput {
  create: UserCreateWithoutMomentInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMomentInput {
  phoneNumber: String!
  nickName: String!
  address: String
  introduction: String!
  apiKey: String
  apiSecret: String
  passPhrase: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  nickName_ASC
  nickName_DESC
  address_ASC
  address_DESC
  introduction_ASC
  introduction_DESC
  apiKey_ASC
  apiKey_DESC
  apiSecret_ASC
  apiSecret_DESC
  passPhrase_ASC
  passPhrase_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  phoneNumber: String!
  nickName: String!
  address: String
  introduction: String!
  apiKey: String
  apiSecret: String
  passPhrase: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  phoneNumber: String
  nickName: String
  address: String
  introduction: String
  moment: MomentUpdateOneWithoutUserInput
  apiKey: String
  apiSecret: String
  passPhrase: String
}

input UserUpdateManyMutationInput {
  phoneNumber: String
  nickName: String
  address: String
  introduction: String
  apiKey: String
  apiSecret: String
  passPhrase: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  nickName: String
  nickName_not: String
  nickName_in: [String!]
  nickName_not_in: [String!]
  nickName_lt: String
  nickName_lte: String
  nickName_gt: String
  nickName_gte: String
  nickName_contains: String
  nickName_not_contains: String
  nickName_starts_with: String
  nickName_not_starts_with: String
  nickName_ends_with: String
  nickName_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  introduction: String
  introduction_not: String
  introduction_in: [String!]
  introduction_not_in: [String!]
  introduction_lt: String
  introduction_lte: String
  introduction_gt: String
  introduction_gte: String
  introduction_contains: String
  introduction_not_contains: String
  introduction_starts_with: String
  introduction_not_starts_with: String
  introduction_ends_with: String
  introduction_not_ends_with: String
  moment: MomentWhereInput
  apiKey: String
  apiKey_not: String
  apiKey_in: [String!]
  apiKey_not_in: [String!]
  apiKey_lt: String
  apiKey_lte: String
  apiKey_gt: String
  apiKey_gte: String
  apiKey_contains: String
  apiKey_not_contains: String
  apiKey_starts_with: String
  apiKey_not_starts_with: String
  apiKey_ends_with: String
  apiKey_not_ends_with: String
  apiSecret: String
  apiSecret_not: String
  apiSecret_in: [String!]
  apiSecret_not_in: [String!]
  apiSecret_lt: String
  apiSecret_lte: String
  apiSecret_gt: String
  apiSecret_gte: String
  apiSecret_contains: String
  apiSecret_not_contains: String
  apiSecret_starts_with: String
  apiSecret_not_starts_with: String
  apiSecret_ends_with: String
  apiSecret_not_ends_with: String
  passPhrase: String
  passPhrase_not: String
  passPhrase_in: [String!]
  passPhrase_not_in: [String!]
  passPhrase_lt: String
  passPhrase_lte: String
  passPhrase_gt: String
  passPhrase_gte: String
  passPhrase_contains: String
  passPhrase_not_contains: String
  passPhrase_starts_with: String
  passPhrase_not_starts_with: String
  passPhrase_ends_with: String
  passPhrase_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    