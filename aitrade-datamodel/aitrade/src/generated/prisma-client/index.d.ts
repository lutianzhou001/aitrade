// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  follow: (where?: FollowWhereInput) => Promise<boolean>;
  moment: (where?: MomentWhereInput) => Promise<boolean>;
  token: (where?: TokenWhereInput) => Promise<boolean>;
  transactions: (where?: TransactionsWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  rate: (where?: rateWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  follows: (args?: {
    where?: FollowWhereInput;
    orderBy?: FollowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Follow>;
  followsConnection: (args?: {
    where?: FollowWhereInput;
    orderBy?: FollowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FollowConnectionPromise;
  moments: (args?: {
    where?: MomentWhereInput;
    orderBy?: MomentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Moment>;
  momentsConnection: (args?: {
    where?: MomentWhereInput;
    orderBy?: MomentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MomentConnectionPromise;
  token: (where: TokenWhereUniqueInput) => TokenNullablePromise;
  tokens: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Token>;
  tokensConnection: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TokenConnectionPromise;
  transactionses: (args?: {
    where?: TransactionsWhereInput;
    orderBy?: TransactionsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Transactions>;
  transactionsesConnection: (args?: {
    where?: TransactionsWhereInput;
    orderBy?: TransactionsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TransactionsConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  rate: (where: rateWhereUniqueInput) => rateNullablePromise;
  rates: (args?: {
    where?: rateWhereInput;
    orderBy?: rateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<rate>;
  ratesConnection: (args?: {
    where?: rateWhereInput;
    orderBy?: rateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => rateConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFollow: (data: FollowCreateInput) => FollowPromise;
  updateManyFollows: (args: {
    data: FollowUpdateManyMutationInput;
    where?: FollowWhereInput;
  }) => BatchPayloadPromise;
  deleteManyFollows: (where?: FollowWhereInput) => BatchPayloadPromise;
  createMoment: (data: MomentCreateInput) => MomentPromise;
  updateManyMoments: (args: {
    data: MomentUpdateManyMutationInput;
    where?: MomentWhereInput;
  }) => BatchPayloadPromise;
  deleteManyMoments: (where?: MomentWhereInput) => BatchPayloadPromise;
  createToken: (data: TokenCreateInput) => TokenPromise;
  updateToken: (args: {
    data: TokenUpdateInput;
    where: TokenWhereUniqueInput;
  }) => TokenPromise;
  updateManyTokens: (args: {
    data: TokenUpdateManyMutationInput;
    where?: TokenWhereInput;
  }) => BatchPayloadPromise;
  upsertToken: (args: {
    where: TokenWhereUniqueInput;
    create: TokenCreateInput;
    update: TokenUpdateInput;
  }) => TokenPromise;
  deleteToken: (where: TokenWhereUniqueInput) => TokenPromise;
  deleteManyTokens: (where?: TokenWhereInput) => BatchPayloadPromise;
  createTransactions: (data: TransactionsCreateInput) => TransactionsPromise;
  updateManyTransactionses: (args: {
    data: TransactionsUpdateManyMutationInput;
    where?: TransactionsWhereInput;
  }) => BatchPayloadPromise;
  deleteManyTransactionses: (
    where?: TransactionsWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createrate: (data: rateCreateInput) => ratePromise;
  updaterate: (args: {
    data: rateUpdateInput;
    where: rateWhereUniqueInput;
  }) => ratePromise;
  updateManyrates: (args: {
    data: rateUpdateManyMutationInput;
    where?: rateWhereInput;
  }) => BatchPayloadPromise;
  upsertrate: (args: {
    where: rateWhereUniqueInput;
    create: rateCreateInput;
    update: rateUpdateInput;
  }) => ratePromise;
  deleterate: (where: rateWhereUniqueInput) => ratePromise;
  deleteManyrates: (where?: rateWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  follow: (
    where?: FollowSubscriptionWhereInput
  ) => FollowSubscriptionPayloadSubscription;
  moment: (
    where?: MomentSubscriptionWhereInput
  ) => MomentSubscriptionPayloadSubscription;
  token: (
    where?: TokenSubscriptionWhereInput
  ) => TokenSubscriptionPayloadSubscription;
  transactions: (
    where?: TransactionsSubscriptionWhereInput
  ) => TransactionsSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  rate: (
    where?: rateSubscriptionWhereInput
  ) => rateSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type MomentOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type FollowOrderByInput =
  | "follower_ASC"
  | "follower_DESC"
  | "leader_ASC"
  | "leader_DESC";

export type TransactionsOrderByInput =
  | "from_ASC"
  | "from_DESC"
  | "to_ASC"
  | "to_DESC"
  | "value_ASC"
  | "value_DESC"
  | "type_ASC"
  | "type_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "nickName_ASC"
  | "nickName_DESC"
  | "address_ASC"
  | "address_DESC"
  | "introduction_ASC"
  | "introduction_DESC"
  | "apiKey_ASC"
  | "apiKey_DESC"
  | "apiSecret_ASC"
  | "apiSecret_DESC"
  | "passPhrase_ASC"
  | "passPhrase_DESC";

export type rateOrderByInput =
  | "key_ASC"
  | "key_DESC"
  | "value_ASC"
  | "value_DESC";

export type TokenOrderByInput =
  | "tokenID_ASC"
  | "tokenID_DESC"
  | "tokenName_ASC"
  | "tokenName_DESC"
  | "isCopycat_ASC"
  | "isCopycat_DESC";

export interface FollowWhereInput {
  follower?: Maybe<String>;
  follower_not?: Maybe<String>;
  follower_in?: Maybe<String[] | String>;
  follower_not_in?: Maybe<String[] | String>;
  follower_lt?: Maybe<String>;
  follower_lte?: Maybe<String>;
  follower_gt?: Maybe<String>;
  follower_gte?: Maybe<String>;
  follower_contains?: Maybe<String>;
  follower_not_contains?: Maybe<String>;
  follower_starts_with?: Maybe<String>;
  follower_not_starts_with?: Maybe<String>;
  follower_ends_with?: Maybe<String>;
  follower_not_ends_with?: Maybe<String>;
  leader?: Maybe<String>;
  leader_not?: Maybe<String>;
  leader_in?: Maybe<String[] | String>;
  leader_not_in?: Maybe<String[] | String>;
  leader_lt?: Maybe<String>;
  leader_lte?: Maybe<String>;
  leader_gt?: Maybe<String>;
  leader_gte?: Maybe<String>;
  leader_contains?: Maybe<String>;
  leader_not_contains?: Maybe<String>;
  leader_starts_with?: Maybe<String>;
  leader_not_starts_with?: Maybe<String>;
  leader_ends_with?: Maybe<String>;
  leader_not_ends_with?: Maybe<String>;
  AND?: Maybe<FollowWhereInput[] | FollowWhereInput>;
  OR?: Maybe<FollowWhereInput[] | FollowWhereInput>;
  NOT?: Maybe<FollowWhereInput[] | FollowWhereInput>;
}

export interface TransactionsWhereInput {
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  to?: Maybe<String>;
  to_not?: Maybe<String>;
  to_in?: Maybe<String[] | String>;
  to_not_in?: Maybe<String[] | String>;
  to_lt?: Maybe<String>;
  to_lte?: Maybe<String>;
  to_gt?: Maybe<String>;
  to_gte?: Maybe<String>;
  to_contains?: Maybe<String>;
  to_not_contains?: Maybe<String>;
  to_starts_with?: Maybe<String>;
  to_not_starts_with?: Maybe<String>;
  to_ends_with?: Maybe<String>;
  to_not_ends_with?: Maybe<String>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<TransactionsWhereInput[] | TransactionsWhereInput>;
  OR?: Maybe<TransactionsWhereInput[] | TransactionsWhereInput>;
  NOT?: Maybe<TransactionsWhereInput[] | TransactionsWhereInput>;
}

export interface FollowSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FollowWhereInput>;
  AND?: Maybe<FollowSubscriptionWhereInput[] | FollowSubscriptionWhereInput>;
  OR?: Maybe<FollowSubscriptionWhereInput[] | FollowSubscriptionWhereInput>;
  NOT?: Maybe<FollowSubscriptionWhereInput[] | FollowSubscriptionWhereInput>;
}

export interface TransactionsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TransactionsWhereInput>;
  AND?: Maybe<
    TransactionsSubscriptionWhereInput[] | TransactionsSubscriptionWhereInput
  >;
  OR?: Maybe<
    TransactionsSubscriptionWhereInput[] | TransactionsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TransactionsSubscriptionWhereInput[] | TransactionsSubscriptionWhereInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  nickName?: Maybe<String>;
  nickName_not?: Maybe<String>;
  nickName_in?: Maybe<String[] | String>;
  nickName_not_in?: Maybe<String[] | String>;
  nickName_lt?: Maybe<String>;
  nickName_lte?: Maybe<String>;
  nickName_gt?: Maybe<String>;
  nickName_gte?: Maybe<String>;
  nickName_contains?: Maybe<String>;
  nickName_not_contains?: Maybe<String>;
  nickName_starts_with?: Maybe<String>;
  nickName_not_starts_with?: Maybe<String>;
  nickName_ends_with?: Maybe<String>;
  nickName_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  introduction?: Maybe<String>;
  introduction_not?: Maybe<String>;
  introduction_in?: Maybe<String[] | String>;
  introduction_not_in?: Maybe<String[] | String>;
  introduction_lt?: Maybe<String>;
  introduction_lte?: Maybe<String>;
  introduction_gt?: Maybe<String>;
  introduction_gte?: Maybe<String>;
  introduction_contains?: Maybe<String>;
  introduction_not_contains?: Maybe<String>;
  introduction_starts_with?: Maybe<String>;
  introduction_not_starts_with?: Maybe<String>;
  introduction_ends_with?: Maybe<String>;
  introduction_not_ends_with?: Maybe<String>;
  moment?: Maybe<MomentWhereInput>;
  apiKey?: Maybe<String>;
  apiKey_not?: Maybe<String>;
  apiKey_in?: Maybe<String[] | String>;
  apiKey_not_in?: Maybe<String[] | String>;
  apiKey_lt?: Maybe<String>;
  apiKey_lte?: Maybe<String>;
  apiKey_gt?: Maybe<String>;
  apiKey_gte?: Maybe<String>;
  apiKey_contains?: Maybe<String>;
  apiKey_not_contains?: Maybe<String>;
  apiKey_starts_with?: Maybe<String>;
  apiKey_not_starts_with?: Maybe<String>;
  apiKey_ends_with?: Maybe<String>;
  apiKey_not_ends_with?: Maybe<String>;
  apiSecret?: Maybe<String>;
  apiSecret_not?: Maybe<String>;
  apiSecret_in?: Maybe<String[] | String>;
  apiSecret_not_in?: Maybe<String[] | String>;
  apiSecret_lt?: Maybe<String>;
  apiSecret_lte?: Maybe<String>;
  apiSecret_gt?: Maybe<String>;
  apiSecret_gte?: Maybe<String>;
  apiSecret_contains?: Maybe<String>;
  apiSecret_not_contains?: Maybe<String>;
  apiSecret_starts_with?: Maybe<String>;
  apiSecret_not_starts_with?: Maybe<String>;
  apiSecret_ends_with?: Maybe<String>;
  apiSecret_not_ends_with?: Maybe<String>;
  passPhrase?: Maybe<String>;
  passPhrase_not?: Maybe<String>;
  passPhrase_in?: Maybe<String[] | String>;
  passPhrase_not_in?: Maybe<String[] | String>;
  passPhrase_lt?: Maybe<String>;
  passPhrase_lte?: Maybe<String>;
  passPhrase_gt?: Maybe<String>;
  passPhrase_gte?: Maybe<String>;
  passPhrase_contains?: Maybe<String>;
  passPhrase_not_contains?: Maybe<String>;
  passPhrase_starts_with?: Maybe<String>;
  passPhrase_not_starts_with?: Maybe<String>;
  passPhrase_ends_with?: Maybe<String>;
  passPhrase_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TransactionsUpdateManyMutationInput {
  from?: Maybe<String>;
  to?: Maybe<String>;
  value?: Maybe<String>;
  type?: Maybe<String>;
}

export interface rateUpdateInput {
  key?: Maybe<String>;
  value?: Maybe<String>;
}

export interface TransactionsCreateInput {
  from: String;
  to: String;
  value: String;
  type: String;
}

export interface rateCreateInput {
  key?: Maybe<String>;
  value?: Maybe<String>;
}

export interface TokenUpdateManyMutationInput {
  tokenID?: Maybe<ID_Input>;
  tokenName?: Maybe<String>;
  isCopycat?: Maybe<String>;
}

export interface MomentUpsertWithoutUserInput {
  update: MomentUpdateWithoutUserDataInput;
  create: MomentCreateWithoutUserInput;
}

export interface TokenUpdateInput {
  tokenID?: Maybe<ID_Input>;
  tokenName?: Maybe<String>;
  isCopycat?: Maybe<String>;
}

export interface MomentUpdateOneWithoutUserInput {
  create?: Maybe<MomentCreateWithoutUserInput>;
  update?: Maybe<MomentUpdateWithoutUserDataInput>;
  upsert?: Maybe<MomentUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateInput {
  phoneNumber?: Maybe<String>;
  nickName?: Maybe<String>;
  address?: Maybe<String>;
  introduction?: Maybe<String>;
  moment?: Maybe<MomentUpdateOneWithoutUserInput>;
  apiKey?: Maybe<String>;
  apiSecret?: Maybe<String>;
  passPhrase?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface TokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TokenWhereInput>;
  AND?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
  OR?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
  NOT?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
}

export interface TokenCreateInput {
  tokenID: ID_Input;
  tokenName: String;
  isCopycat: String;
}

export interface MomentCreateOneWithoutUserInput {
  create?: Maybe<MomentCreateWithoutUserInput>;
}

export interface MomentUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface MomentWhereInput {
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<MomentWhereInput[] | MomentWhereInput>;
  OR?: Maybe<MomentWhereInput[] | MomentWhereInput>;
  NOT?: Maybe<MomentWhereInput[] | MomentWhereInput>;
}

export interface UserCreateWithoutMomentInput {
  phoneNumber: String;
  nickName: String;
  address?: Maybe<String>;
  introduction: String;
  apiKey?: Maybe<String>;
  apiSecret?: Maybe<String>;
  passPhrase?: Maybe<String>;
}

export interface MomentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MomentWhereInput>;
  AND?: Maybe<MomentSubscriptionWhereInput[] | MomentSubscriptionWhereInput>;
  OR?: Maybe<MomentSubscriptionWhereInput[] | MomentSubscriptionWhereInput>;
  NOT?: Maybe<MomentSubscriptionWhereInput[] | MomentSubscriptionWhereInput>;
}

export type rateWhereUniqueInput = AtLeastOne<{
  key: Maybe<String>;
}>;

export interface MomentUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface UserCreateOneWithoutMomentInput {
  create?: Maybe<UserCreateWithoutMomentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TokenWhereInput {
  tokenID?: Maybe<ID_Input>;
  tokenID_not?: Maybe<ID_Input>;
  tokenID_in?: Maybe<ID_Input[] | ID_Input>;
  tokenID_not_in?: Maybe<ID_Input[] | ID_Input>;
  tokenID_lt?: Maybe<ID_Input>;
  tokenID_lte?: Maybe<ID_Input>;
  tokenID_gt?: Maybe<ID_Input>;
  tokenID_gte?: Maybe<ID_Input>;
  tokenID_contains?: Maybe<ID_Input>;
  tokenID_not_contains?: Maybe<ID_Input>;
  tokenID_starts_with?: Maybe<ID_Input>;
  tokenID_not_starts_with?: Maybe<ID_Input>;
  tokenID_ends_with?: Maybe<ID_Input>;
  tokenID_not_ends_with?: Maybe<ID_Input>;
  tokenName?: Maybe<String>;
  tokenName_not?: Maybe<String>;
  tokenName_in?: Maybe<String[] | String>;
  tokenName_not_in?: Maybe<String[] | String>;
  tokenName_lt?: Maybe<String>;
  tokenName_lte?: Maybe<String>;
  tokenName_gt?: Maybe<String>;
  tokenName_gte?: Maybe<String>;
  tokenName_contains?: Maybe<String>;
  tokenName_not_contains?: Maybe<String>;
  tokenName_starts_with?: Maybe<String>;
  tokenName_not_starts_with?: Maybe<String>;
  tokenName_ends_with?: Maybe<String>;
  tokenName_not_ends_with?: Maybe<String>;
  isCopycat?: Maybe<String>;
  isCopycat_not?: Maybe<String>;
  isCopycat_in?: Maybe<String[] | String>;
  isCopycat_not_in?: Maybe<String[] | String>;
  isCopycat_lt?: Maybe<String>;
  isCopycat_lte?: Maybe<String>;
  isCopycat_gt?: Maybe<String>;
  isCopycat_gte?: Maybe<String>;
  isCopycat_contains?: Maybe<String>;
  isCopycat_not_contains?: Maybe<String>;
  isCopycat_starts_with?: Maybe<String>;
  isCopycat_not_starts_with?: Maybe<String>;
  isCopycat_ends_with?: Maybe<String>;
  isCopycat_not_ends_with?: Maybe<String>;
  AND?: Maybe<TokenWhereInput[] | TokenWhereInput>;
  OR?: Maybe<TokenWhereInput[] | TokenWhereInput>;
  NOT?: Maybe<TokenWhereInput[] | TokenWhereInput>;
}

export interface rateWhereInput {
  key?: Maybe<String>;
  key_not?: Maybe<String>;
  key_in?: Maybe<String[] | String>;
  key_not_in?: Maybe<String[] | String>;
  key_lt?: Maybe<String>;
  key_lte?: Maybe<String>;
  key_gt?: Maybe<String>;
  key_gte?: Maybe<String>;
  key_contains?: Maybe<String>;
  key_not_contains?: Maybe<String>;
  key_starts_with?: Maybe<String>;
  key_not_starts_with?: Maybe<String>;
  key_ends_with?: Maybe<String>;
  key_not_ends_with?: Maybe<String>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<rateWhereInput[] | rateWhereInput>;
  OR?: Maybe<rateWhereInput[] | rateWhereInput>;
  NOT?: Maybe<rateWhereInput[] | rateWhereInput>;
}

export interface UserCreateInput {
  phoneNumber: String;
  nickName: String;
  address?: Maybe<String>;
  introduction: String;
  moment?: Maybe<MomentCreateOneWithoutUserInput>;
  apiKey?: Maybe<String>;
  apiSecret?: Maybe<String>;
  passPhrase?: Maybe<String>;
}

export interface FollowCreateInput {
  follower: String;
  leader: String;
}

export interface FollowUpdateManyMutationInput {
  follower?: Maybe<String>;
  leader?: Maybe<String>;
}

export interface MomentCreateInput {
  user?: Maybe<UserCreateOneWithoutMomentInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface rateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<rateWhereInput>;
  AND?: Maybe<rateSubscriptionWhereInput[] | rateSubscriptionWhereInput>;
  OR?: Maybe<rateSubscriptionWhereInput[] | rateSubscriptionWhereInput>;
  NOT?: Maybe<rateSubscriptionWhereInput[] | rateSubscriptionWhereInput>;
}

export interface rateUpdateManyMutationInput {
  key?: Maybe<String>;
  value?: Maybe<String>;
}

export interface MomentCreateWithoutUserInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export type TokenWhereUniqueInput = AtLeastOne<{
  tokenID: Maybe<ID_Input>;
}>;

export interface UserUpdateManyMutationInput {
  phoneNumber?: Maybe<String>;
  nickName?: Maybe<String>;
  address?: Maybe<String>;
  introduction?: Maybe<String>;
  apiKey?: Maybe<String>;
  apiSecret?: Maybe<String>;
  passPhrase?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Aggregaterate {
  count: Int;
}

export interface AggregateratePromise
  extends Promise<Aggregaterate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregaterateSubscription
  extends Promise<AsyncIterator<Aggregaterate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Moment {
  createdAt: DateTimeOutput;
  title?: String;
  content?: String;
}

export interface MomentPromise extends Promise<Moment>, Fragmentable {
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface MomentSubscription
  extends Promise<AsyncIterator<Moment>>,
    Fragmentable {
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface MomentNullablePromise
  extends Promise<Moment | null>,
    Fragmentable {
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface ratePreviousValues {
  key?: String;
  value?: String;
}

export interface ratePreviousValuesPromise
  extends Promise<ratePreviousValues>,
    Fragmentable {
  key: () => Promise<String>;
  value: () => Promise<String>;
}

export interface ratePreviousValuesSubscription
  extends Promise<AsyncIterator<ratePreviousValues>>,
    Fragmentable {
  key: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  phoneNumber: String;
  nickName: String;
  address?: String;
  introduction: String;
  apiKey?: String;
  apiSecret?: String;
  passPhrase?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  nickName: () => Promise<String>;
  address: () => Promise<String>;
  introduction: () => Promise<String>;
  moment: <T = MomentPromise>() => T;
  apiKey: () => Promise<String>;
  apiSecret: () => Promise<String>;
  passPhrase: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  nickName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  introduction: () => Promise<AsyncIterator<String>>;
  moment: <T = MomentSubscription>() => T;
  apiKey: () => Promise<AsyncIterator<String>>;
  apiSecret: () => Promise<AsyncIterator<String>>;
  passPhrase: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  nickName: () => Promise<String>;
  address: () => Promise<String>;
  introduction: () => Promise<String>;
  moment: <T = MomentPromise>() => T;
  apiKey: () => Promise<String>;
  apiSecret: () => Promise<String>;
  passPhrase: () => Promise<String>;
}

export interface Follow {
  follower: String;
  leader: String;
}

export interface FollowPromise extends Promise<Follow>, Fragmentable {
  follower: () => Promise<String>;
  leader: () => Promise<String>;
}

export interface FollowSubscription
  extends Promise<AsyncIterator<Follow>>,
    Fragmentable {
  follower: () => Promise<AsyncIterator<String>>;
  leader: () => Promise<AsyncIterator<String>>;
}

export interface FollowNullablePromise
  extends Promise<Follow | null>,
    Fragmentable {
  follower: () => Promise<String>;
  leader: () => Promise<String>;
}

export interface rateEdge {
  node: rate;
  cursor: String;
}

export interface rateEdgePromise extends Promise<rateEdge>, Fragmentable {
  node: <T = ratePromise>() => T;
  cursor: () => Promise<String>;
}

export interface rateEdgeSubscription
  extends Promise<AsyncIterator<rateEdge>>,
    Fragmentable {
  node: <T = rateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface rateSubscriptionPayload {
  mutation: MutationType;
  node: rate;
  updatedFields: String[];
  previousValues: ratePreviousValues;
}

export interface rateSubscriptionPayloadPromise
  extends Promise<rateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ratePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ratePreviousValuesPromise>() => T;
}

export interface rateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<rateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = rateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ratePreviousValuesSubscription>() => T;
}

export interface rate {
  key?: String;
  value?: String;
}

export interface ratePromise extends Promise<rate>, Fragmentable {
  key: () => Promise<String>;
  value: () => Promise<String>;
}

export interface rateSubscription
  extends Promise<AsyncIterator<rate>>,
    Fragmentable {
  key: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface rateNullablePromise
  extends Promise<rate | null>,
    Fragmentable {
  key: () => Promise<String>;
  value: () => Promise<String>;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  phoneNumber: String;
  nickName: String;
  address?: String;
  introduction: String;
  apiKey?: String;
  apiSecret?: String;
  passPhrase?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  nickName: () => Promise<String>;
  address: () => Promise<String>;
  introduction: () => Promise<String>;
  apiKey: () => Promise<String>;
  apiSecret: () => Promise<String>;
  passPhrase: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  nickName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  introduction: () => Promise<AsyncIterator<String>>;
  apiKey: () => Promise<AsyncIterator<String>>;
  apiSecret: () => Promise<AsyncIterator<String>>;
  passPhrase: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFollow {
  count: Int;
}

export interface AggregateFollowPromise
  extends Promise<AggregateFollow>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFollowSubscription
  extends Promise<AsyncIterator<AggregateFollow>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateTransactions {
  count: Int;
}

export interface AggregateTransactionsPromise
  extends Promise<AggregateTransactions>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransactionsSubscription
  extends Promise<AsyncIterator<AggregateTransactions>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FollowEdge {
  node: Follow;
  cursor: String;
}

export interface FollowEdgePromise extends Promise<FollowEdge>, Fragmentable {
  node: <T = FollowPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FollowEdgeSubscription
  extends Promise<AsyncIterator<FollowEdge>>,
    Fragmentable {
  node: <T = FollowSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TransactionsConnection {
  pageInfo: PageInfo;
  edges: TransactionsEdge[];
}

export interface TransactionsConnectionPromise
  extends Promise<TransactionsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransactionsEdge>>() => T;
  aggregate: <T = AggregateTransactionsPromise>() => T;
}

export interface TransactionsConnectionSubscription
  extends Promise<AsyncIterator<TransactionsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransactionsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransactionsSubscription>() => T;
}

export interface FollowSubscriptionPayload {
  mutation: MutationType;
  node: Follow;
  updatedFields: String[];
  previousValues: FollowPreviousValues;
}

export interface FollowSubscriptionPayloadPromise
  extends Promise<FollowSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FollowPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FollowPreviousValuesPromise>() => T;
}

export interface FollowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FollowSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FollowSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FollowPreviousValuesSubscription>() => T;
}

export interface AggregateToken {
  count: Int;
}

export interface AggregateTokenPromise
  extends Promise<AggregateToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTokenSubscription
  extends Promise<AsyncIterator<AggregateToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FollowPreviousValues {
  follower: String;
  leader: String;
}

export interface FollowPreviousValuesPromise
  extends Promise<FollowPreviousValues>,
    Fragmentable {
  follower: () => Promise<String>;
  leader: () => Promise<String>;
}

export interface FollowPreviousValuesSubscription
  extends Promise<AsyncIterator<FollowPreviousValues>>,
    Fragmentable {
  follower: () => Promise<AsyncIterator<String>>;
  leader: () => Promise<AsyncIterator<String>>;
}

export interface TokenConnection {
  pageInfo: PageInfo;
  edges: TokenEdge[];
}

export interface TokenConnectionPromise
  extends Promise<TokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TokenEdge>>() => T;
  aggregate: <T = AggregateTokenPromise>() => T;
}

export interface TokenConnectionSubscription
  extends Promise<AsyncIterator<TokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTokenSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateMoment {
  count: Int;
}

export interface AggregateMomentPromise
  extends Promise<AggregateMoment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMomentSubscription
  extends Promise<AsyncIterator<AggregateMoment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MomentSubscriptionPayload {
  mutation: MutationType;
  node: Moment;
  updatedFields: String[];
  previousValues: MomentPreviousValues;
}

export interface MomentSubscriptionPayloadPromise
  extends Promise<MomentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MomentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MomentPreviousValuesPromise>() => T;
}

export interface MomentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MomentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MomentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MomentPreviousValuesSubscription>() => T;
}

export interface MomentConnection {
  pageInfo: PageInfo;
  edges: MomentEdge[];
}

export interface MomentConnectionPromise
  extends Promise<MomentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MomentEdge>>() => T;
  aggregate: <T = AggregateMomentPromise>() => T;
}

export interface MomentConnectionSubscription
  extends Promise<AsyncIterator<MomentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MomentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMomentSubscription>() => T;
}

export interface MomentPreviousValues {
  createdAt: DateTimeOutput;
  title?: String;
  content?: String;
}

export interface MomentPreviousValuesPromise
  extends Promise<MomentPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface MomentPreviousValuesSubscription
  extends Promise<AsyncIterator<MomentPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TransactionsEdge {
  node: Transactions;
  cursor: String;
}

export interface TransactionsEdgePromise
  extends Promise<TransactionsEdge>,
    Fragmentable {
  node: <T = TransactionsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransactionsEdgeSubscription
  extends Promise<AsyncIterator<TransactionsEdge>>,
    Fragmentable {
  node: <T = TransactionsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TokenSubscriptionPayload {
  mutation: MutationType;
  node: Token;
  updatedFields: String[];
  previousValues: TokenPreviousValues;
}

export interface TokenSubscriptionPayloadPromise
  extends Promise<TokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TokenPreviousValuesPromise>() => T;
}

export interface TokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TokenPreviousValuesSubscription>() => T;
}

export interface TokenEdge {
  node: Token;
  cursor: String;
}

export interface TokenEdgePromise extends Promise<TokenEdge>, Fragmentable {
  node: <T = TokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TokenEdgeSubscription
  extends Promise<AsyncIterator<TokenEdge>>,
    Fragmentable {
  node: <T = TokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MomentEdge {
  node: Moment;
  cursor: String;
}

export interface MomentEdgePromise extends Promise<MomentEdge>, Fragmentable {
  node: <T = MomentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MomentEdgeSubscription
  extends Promise<AsyncIterator<MomentEdge>>,
    Fragmentable {
  node: <T = MomentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TransactionsPreviousValues {
  from: String;
  to: String;
  value: String;
  type: String;
}

export interface TransactionsPreviousValuesPromise
  extends Promise<TransactionsPreviousValues>,
    Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<String>;
}

export interface TransactionsPreviousValuesSubscription
  extends Promise<AsyncIterator<TransactionsPreviousValues>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface TransactionsSubscriptionPayload {
  mutation: MutationType;
  node: Transactions;
  updatedFields: String[];
  previousValues: TransactionsPreviousValues;
}

export interface TransactionsSubscriptionPayloadPromise
  extends Promise<TransactionsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransactionsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransactionsPreviousValuesPromise>() => T;
}

export interface TransactionsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransactionsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransactionsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransactionsPreviousValuesSubscription>() => T;
}

export interface FollowConnection {
  pageInfo: PageInfo;
  edges: FollowEdge[];
}

export interface FollowConnectionPromise
  extends Promise<FollowConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FollowEdge>>() => T;
  aggregate: <T = AggregateFollowPromise>() => T;
}

export interface FollowConnectionSubscription
  extends Promise<AsyncIterator<FollowConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FollowEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFollowSubscription>() => T;
}

export interface TokenPreviousValues {
  tokenID: ID_Output;
  tokenName: String;
  isCopycat: String;
}

export interface TokenPreviousValuesPromise
  extends Promise<TokenPreviousValues>,
    Fragmentable {
  tokenID: () => Promise<ID_Output>;
  tokenName: () => Promise<String>;
  isCopycat: () => Promise<String>;
}

export interface TokenPreviousValuesSubscription
  extends Promise<AsyncIterator<TokenPreviousValues>>,
    Fragmentable {
  tokenID: () => Promise<AsyncIterator<ID_Output>>;
  tokenName: () => Promise<AsyncIterator<String>>;
  isCopycat: () => Promise<AsyncIterator<String>>;
}

export interface rateConnection {
  pageInfo: PageInfo;
  edges: rateEdge[];
}

export interface rateConnectionPromise
  extends Promise<rateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<rateEdge>>() => T;
  aggregate: <T = AggregateratePromise>() => T;
}

export interface rateConnectionSubscription
  extends Promise<AsyncIterator<rateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<rateEdgeSubscription>>>() => T;
  aggregate: <T = AggregaterateSubscription>() => T;
}

export interface Token {
  tokenID: ID_Output;
  tokenName: String;
  isCopycat: String;
}

export interface TokenPromise extends Promise<Token>, Fragmentable {
  tokenID: () => Promise<ID_Output>;
  tokenName: () => Promise<String>;
  isCopycat: () => Promise<String>;
}

export interface TokenSubscription
  extends Promise<AsyncIterator<Token>>,
    Fragmentable {
  tokenID: () => Promise<AsyncIterator<ID_Output>>;
  tokenName: () => Promise<AsyncIterator<String>>;
  isCopycat: () => Promise<AsyncIterator<String>>;
}

export interface TokenNullablePromise
  extends Promise<Token | null>,
    Fragmentable {
  tokenID: () => Promise<ID_Output>;
  tokenName: () => Promise<String>;
  isCopycat: () => Promise<String>;
}

export interface Transactions {
  from: String;
  to: String;
  value: String;
  type: String;
}

export interface TransactionsPromise
  extends Promise<Transactions>,
    Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<String>;
}

export interface TransactionsSubscription
  extends Promise<AsyncIterator<Transactions>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface TransactionsNullablePromise
  extends Promise<Transactions | null>,
    Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Token",
    embedded: false
  },
  {
    name: "Follow",
    embedded: false
  },
  {
    name: "Transactions",
    embedded: false
  },
  {
    name: "Moment",
    embedded: false
  },
  {
    name: "rate",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
