// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  follow: (where?: FollowWhereInput) => Promise<boolean>;
  kOL: (where?: KOLWhereInput) => Promise<boolean>;
  moment: (where?: MomentWhereInput) => Promise<boolean>;
  token: (where?: TokenWhereInput) => Promise<boolean>;
  transactions: (where?: TransactionsWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  contract: (where?: contractWhereInput) => Promise<boolean>;
  margincloseout: (where?: margincloseoutWhereInput) => Promise<boolean>;
  onchain: (where?: onchainWhereInput) => Promise<boolean>;
  rate: (where?: rateWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  follows: (
    args?: {
      where?: FollowWhereInput;
      orderBy?: FollowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Follow>;
  followsConnection: (
    args?: {
      where?: FollowWhereInput;
      orderBy?: FollowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FollowConnectionPromise;
  kOLs: (
    args?: {
      where?: KOLWhereInput;
      orderBy?: KOLOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<KOL>;
  kOLsConnection: (
    args?: {
      where?: KOLWhereInput;
      orderBy?: KOLOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => KOLConnectionPromise;
  moments: (
    args?: {
      where?: MomentWhereInput;
      orderBy?: MomentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Moment>;
  momentsConnection: (
    args?: {
      where?: MomentWhereInput;
      orderBy?: MomentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MomentConnectionPromise;
  token: (where: TokenWhereUniqueInput) => TokenPromise;
  tokens: (
    args?: {
      where?: TokenWhereInput;
      orderBy?: TokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Token>;
  tokensConnection: (
    args?: {
      where?: TokenWhereInput;
      orderBy?: TokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TokenConnectionPromise;
  transactionses: (
    args?: {
      where?: TransactionsWhereInput;
      orderBy?: TransactionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Transactions>;
  transactionsesConnection: (
    args?: {
      where?: TransactionsWhereInput;
      orderBy?: TransactionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TransactionsConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  contracts: (
    args?: {
      where?: contractWhereInput;
      orderBy?: contractOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<contract>;
  contractsConnection: (
    args?: {
      where?: contractWhereInput;
      orderBy?: contractOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => contractConnectionPromise;
  margincloseouts: (
    args?: {
      where?: margincloseoutWhereInput;
      orderBy?: margincloseoutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<margincloseout>;
  margincloseoutsConnection: (
    args?: {
      where?: margincloseoutWhereInput;
      orderBy?: margincloseoutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => margincloseoutConnectionPromise;
  onchains: (
    args?: {
      where?: onchainWhereInput;
      orderBy?: onchainOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<onchain>;
  onchainsConnection: (
    args?: {
      where?: onchainWhereInput;
      orderBy?: onchainOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => onchainConnectionPromise;
  rate: (where: rateWhereUniqueInput) => ratePromise;
  rates: (
    args?: {
      where?: rateWhereInput;
      orderBy?: rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<rate>;
  ratesConnection: (
    args?: {
      where?: rateWhereInput;
      orderBy?: rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => rateConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFollow: (data: FollowCreateInput) => FollowPromise;
  updateManyFollows: (
    args: { data: FollowUpdateManyMutationInput; where?: FollowWhereInput }
  ) => BatchPayloadPromise;
  deleteManyFollows: (where?: FollowWhereInput) => BatchPayloadPromise;
  createKOL: (data: KOLCreateInput) => KOLPromise;
  updateManyKOLs: (
    args: { data: KOLUpdateManyMutationInput; where?: KOLWhereInput }
  ) => BatchPayloadPromise;
  deleteManyKOLs: (where?: KOLWhereInput) => BatchPayloadPromise;
  createMoment: (data: MomentCreateInput) => MomentPromise;
  updateManyMoments: (
    args: { data: MomentUpdateManyMutationInput; where?: MomentWhereInput }
  ) => BatchPayloadPromise;
  deleteManyMoments: (where?: MomentWhereInput) => BatchPayloadPromise;
  createToken: (data: TokenCreateInput) => TokenPromise;
  updateToken: (
    args: { data: TokenUpdateInput; where: TokenWhereUniqueInput }
  ) => TokenPromise;
  updateManyTokens: (
    args: { data: TokenUpdateManyMutationInput; where?: TokenWhereInput }
  ) => BatchPayloadPromise;
  upsertToken: (
    args: {
      where: TokenWhereUniqueInput;
      create: TokenCreateInput;
      update: TokenUpdateInput;
    }
  ) => TokenPromise;
  deleteToken: (where: TokenWhereUniqueInput) => TokenPromise;
  deleteManyTokens: (where?: TokenWhereInput) => BatchPayloadPromise;
  createTransactions: (data: TransactionsCreateInput) => TransactionsPromise;
  updateManyTransactionses: (
    args: {
      data: TransactionsUpdateManyMutationInput;
      where?: TransactionsWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyTransactionses: (
    where?: TransactionsWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createcontract: (data: contractCreateInput) => contractPromise;
  updateManycontracts: (
    args: { data: contractUpdateManyMutationInput; where?: contractWhereInput }
  ) => BatchPayloadPromise;
  deleteManycontracts: (where?: contractWhereInput) => BatchPayloadPromise;
  createmargincloseout: (
    data: margincloseoutCreateInput
  ) => margincloseoutPromise;
  updateManymargincloseouts: (
    args: {
      data: margincloseoutUpdateManyMutationInput;
      where?: margincloseoutWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManymargincloseouts: (
    where?: margincloseoutWhereInput
  ) => BatchPayloadPromise;
  createonchain: (data: onchainCreateInput) => onchainPromise;
  updateManyonchains: (
    args: { data: onchainUpdateManyMutationInput; where?: onchainWhereInput }
  ) => BatchPayloadPromise;
  deleteManyonchains: (where?: onchainWhereInput) => BatchPayloadPromise;
  createrate: (data: rateCreateInput) => ratePromise;
  updaterate: (
    args: { data: rateUpdateInput; where: rateWhereUniqueInput }
  ) => ratePromise;
  updateManyrates: (
    args: { data: rateUpdateManyMutationInput; where?: rateWhereInput }
  ) => BatchPayloadPromise;
  upsertrate: (
    args: {
      where: rateWhereUniqueInput;
      create: rateCreateInput;
      update: rateUpdateInput;
    }
  ) => ratePromise;
  deleterate: (where: rateWhereUniqueInput) => ratePromise;
  deleteManyrates: (where?: rateWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  follow: (
    where?: FollowSubscriptionWhereInput
  ) => FollowSubscriptionPayloadSubscription;
  kOL: (
    where?: KOLSubscriptionWhereInput
  ) => KOLSubscriptionPayloadSubscription;
  moment: (
    where?: MomentSubscriptionWhereInput
  ) => MomentSubscriptionPayloadSubscription;
  token: (
    where?: TokenSubscriptionWhereInput
  ) => TokenSubscriptionPayloadSubscription;
  transactions: (
    where?: TransactionsSubscriptionWhereInput
  ) => TransactionsSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  contract: (
    where?: contractSubscriptionWhereInput
  ) => contractSubscriptionPayloadSubscription;
  margincloseout: (
    where?: margincloseoutSubscriptionWhereInput
  ) => margincloseoutSubscriptionPayloadSubscription;
  onchain: (
    where?: onchainSubscriptionWhereInput
  ) => onchainSubscriptionPayloadSubscription;
  rate: (
    where?: rateSubscriptionWhereInput
  ) => rateSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FollowOrderByInput =
  | "follower_ASC"
  | "follower_DESC"
  | "leader_ASC"
  | "leader_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type KOLOrderByInput =
  | "long_ASC"
  | "long_DESC"
  | "short_ASC"
  | "short_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MomentOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TokenOrderByInput =
  | "tokenID_ASC"
  | "tokenID_DESC"
  | "tokenName_ASC"
  | "tokenName_DESC"
  | "isCopycat_ASC"
  | "isCopycat_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TransactionsOrderByInput =
  | "from_ASC"
  | "from_DESC"
  | "to_ASC"
  | "to_DESC"
  | "value_ASC"
  | "value_DESC"
  | "type_ASC"
  | "type_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "nickName_ASC"
  | "nickName_DESC"
  | "address_ASC"
  | "address_DESC"
  | "introduction_ASC"
  | "introduction_DESC"
  | "apiKey_ASC"
  | "apiKey_DESC"
  | "apiSecret_ASC"
  | "apiSecret_DESC"
  | "passPhrase_ASC"
  | "passPhrase_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type contractOrderByInput =
  | "long_ASC"
  | "long_DESC"
  | "short_ASC"
  | "short_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type margincloseoutOrderByInput =
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "exchange_ASC"
  | "exchange_DESC"
  | "contract_name_ASC"
  | "contract_name_DESC"
  | "contract_type_ASC"
  | "contract_type_DESC"
  | "closeout_type_ASC"
  | "closeout_type_DESC"
  | "contract_price_ASC"
  | "contract_price_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type onchainOrderByInput =
  | "from_ASC"
  | "from_DESC"
  | "to_ASC"
  | "to_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type rateOrderByInput =
  | "key_ASC"
  | "key_DESC"
  | "value_ASC"
  | "value_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface FollowWhereInput {
  follower?: String;
  follower_not?: String;
  follower_in?: String[] | String;
  follower_not_in?: String[] | String;
  follower_lt?: String;
  follower_lte?: String;
  follower_gt?: String;
  follower_gte?: String;
  follower_contains?: String;
  follower_not_contains?: String;
  follower_starts_with?: String;
  follower_not_starts_with?: String;
  follower_ends_with?: String;
  follower_not_ends_with?: String;
  leader?: String;
  leader_not?: String;
  leader_in?: String[] | String;
  leader_not_in?: String[] | String;
  leader_lt?: String;
  leader_lte?: String;
  leader_gt?: String;
  leader_gte?: String;
  leader_contains?: String;
  leader_not_contains?: String;
  leader_starts_with?: String;
  leader_not_starts_with?: String;
  leader_ends_with?: String;
  leader_not_ends_with?: String;
  AND?: FollowWhereInput[] | FollowWhereInput;
  OR?: FollowWhereInput[] | FollowWhereInput;
  NOT?: FollowWhereInput[] | FollowWhereInput;
}

export interface KOLWhereInput {
  long?: Int;
  long_not?: Int;
  long_in?: Int[] | Int;
  long_not_in?: Int[] | Int;
  long_lt?: Int;
  long_lte?: Int;
  long_gt?: Int;
  long_gte?: Int;
  short?: Int;
  short_not?: Int;
  short_in?: Int[] | Int;
  short_not_in?: Int[] | Int;
  short_lt?: Int;
  short_lte?: Int;
  short_gt?: Int;
  short_gte?: Int;
  AND?: KOLWhereInput[] | KOLWhereInput;
  OR?: KOLWhereInput[] | KOLWhereInput;
  NOT?: KOLWhereInput[] | KOLWhereInput;
}

export interface MomentWhereInput {
  user?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: MomentWhereInput[] | MomentWhereInput;
  OR?: MomentWhereInput[] | MomentWhereInput;
  NOT?: MomentWhereInput[] | MomentWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  phoneNumber?: String;
  phoneNumber_not?: String;
  phoneNumber_in?: String[] | String;
  phoneNumber_not_in?: String[] | String;
  phoneNumber_lt?: String;
  phoneNumber_lte?: String;
  phoneNumber_gt?: String;
  phoneNumber_gte?: String;
  phoneNumber_contains?: String;
  phoneNumber_not_contains?: String;
  phoneNumber_starts_with?: String;
  phoneNumber_not_starts_with?: String;
  phoneNumber_ends_with?: String;
  phoneNumber_not_ends_with?: String;
  nickName?: String;
  nickName_not?: String;
  nickName_in?: String[] | String;
  nickName_not_in?: String[] | String;
  nickName_lt?: String;
  nickName_lte?: String;
  nickName_gt?: String;
  nickName_gte?: String;
  nickName_contains?: String;
  nickName_not_contains?: String;
  nickName_starts_with?: String;
  nickName_not_starts_with?: String;
  nickName_ends_with?: String;
  nickName_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  introduction?: String;
  introduction_not?: String;
  introduction_in?: String[] | String;
  introduction_not_in?: String[] | String;
  introduction_lt?: String;
  introduction_lte?: String;
  introduction_gt?: String;
  introduction_gte?: String;
  introduction_contains?: String;
  introduction_not_contains?: String;
  introduction_starts_with?: String;
  introduction_not_starts_with?: String;
  introduction_ends_with?: String;
  introduction_not_ends_with?: String;
  moment?: MomentWhereInput;
  apiKey?: String;
  apiKey_not?: String;
  apiKey_in?: String[] | String;
  apiKey_not_in?: String[] | String;
  apiKey_lt?: String;
  apiKey_lte?: String;
  apiKey_gt?: String;
  apiKey_gte?: String;
  apiKey_contains?: String;
  apiKey_not_contains?: String;
  apiKey_starts_with?: String;
  apiKey_not_starts_with?: String;
  apiKey_ends_with?: String;
  apiKey_not_ends_with?: String;
  apiSecret?: String;
  apiSecret_not?: String;
  apiSecret_in?: String[] | String;
  apiSecret_not_in?: String[] | String;
  apiSecret_lt?: String;
  apiSecret_lte?: String;
  apiSecret_gt?: String;
  apiSecret_gte?: String;
  apiSecret_contains?: String;
  apiSecret_not_contains?: String;
  apiSecret_starts_with?: String;
  apiSecret_not_starts_with?: String;
  apiSecret_ends_with?: String;
  apiSecret_not_ends_with?: String;
  passPhrase?: String;
  passPhrase_not?: String;
  passPhrase_in?: String[] | String;
  passPhrase_not_in?: String[] | String;
  passPhrase_lt?: String;
  passPhrase_lte?: String;
  passPhrase_gt?: String;
  passPhrase_gte?: String;
  passPhrase_contains?: String;
  passPhrase_not_contains?: String;
  passPhrase_starts_with?: String;
  passPhrase_not_starts_with?: String;
  passPhrase_ends_with?: String;
  passPhrase_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type TokenWhereUniqueInput = AtLeastOne<{
  tokenID: ID_Input;
}>;

export interface TokenWhereInput {
  tokenID?: ID_Input;
  tokenID_not?: ID_Input;
  tokenID_in?: ID_Input[] | ID_Input;
  tokenID_not_in?: ID_Input[] | ID_Input;
  tokenID_lt?: ID_Input;
  tokenID_lte?: ID_Input;
  tokenID_gt?: ID_Input;
  tokenID_gte?: ID_Input;
  tokenID_contains?: ID_Input;
  tokenID_not_contains?: ID_Input;
  tokenID_starts_with?: ID_Input;
  tokenID_not_starts_with?: ID_Input;
  tokenID_ends_with?: ID_Input;
  tokenID_not_ends_with?: ID_Input;
  tokenName?: String;
  tokenName_not?: String;
  tokenName_in?: String[] | String;
  tokenName_not_in?: String[] | String;
  tokenName_lt?: String;
  tokenName_lte?: String;
  tokenName_gt?: String;
  tokenName_gte?: String;
  tokenName_contains?: String;
  tokenName_not_contains?: String;
  tokenName_starts_with?: String;
  tokenName_not_starts_with?: String;
  tokenName_ends_with?: String;
  tokenName_not_ends_with?: String;
  isCopycat?: String;
  isCopycat_not?: String;
  isCopycat_in?: String[] | String;
  isCopycat_not_in?: String[] | String;
  isCopycat_lt?: String;
  isCopycat_lte?: String;
  isCopycat_gt?: String;
  isCopycat_gte?: String;
  isCopycat_contains?: String;
  isCopycat_not_contains?: String;
  isCopycat_starts_with?: String;
  isCopycat_not_starts_with?: String;
  isCopycat_ends_with?: String;
  isCopycat_not_ends_with?: String;
  AND?: TokenWhereInput[] | TokenWhereInput;
  OR?: TokenWhereInput[] | TokenWhereInput;
  NOT?: TokenWhereInput[] | TokenWhereInput;
}

export interface TransactionsWhereInput {
  from?: String;
  from_not?: String;
  from_in?: String[] | String;
  from_not_in?: String[] | String;
  from_lt?: String;
  from_lte?: String;
  from_gt?: String;
  from_gte?: String;
  from_contains?: String;
  from_not_contains?: String;
  from_starts_with?: String;
  from_not_starts_with?: String;
  from_ends_with?: String;
  from_not_ends_with?: String;
  to?: String;
  to_not?: String;
  to_in?: String[] | String;
  to_not_in?: String[] | String;
  to_lt?: String;
  to_lte?: String;
  to_gt?: String;
  to_gte?: String;
  to_contains?: String;
  to_not_contains?: String;
  to_starts_with?: String;
  to_not_starts_with?: String;
  to_ends_with?: String;
  to_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  AND?: TransactionsWhereInput[] | TransactionsWhereInput;
  OR?: TransactionsWhereInput[] | TransactionsWhereInput;
  NOT?: TransactionsWhereInput[] | TransactionsWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface contractWhereInput {
  long?: Int;
  long_not?: Int;
  long_in?: Int[] | Int;
  long_not_in?: Int[] | Int;
  long_lt?: Int;
  long_lte?: Int;
  long_gt?: Int;
  long_gte?: Int;
  short?: Int;
  short_not?: Int;
  short_in?: Int[] | Int;
  short_not_in?: Int[] | Int;
  short_lt?: Int;
  short_lte?: Int;
  short_gt?: Int;
  short_gte?: Int;
  AND?: contractWhereInput[] | contractWhereInput;
  OR?: contractWhereInput[] | contractWhereInput;
  NOT?: contractWhereInput[] | contractWhereInput;
}

export interface margincloseoutWhereInput {
  timestamp?: Int;
  timestamp_not?: Int;
  timestamp_in?: Int[] | Int;
  timestamp_not_in?: Int[] | Int;
  timestamp_lt?: Int;
  timestamp_lte?: Int;
  timestamp_gt?: Int;
  timestamp_gte?: Int;
  exchange?: String;
  exchange_not?: String;
  exchange_in?: String[] | String;
  exchange_not_in?: String[] | String;
  exchange_lt?: String;
  exchange_lte?: String;
  exchange_gt?: String;
  exchange_gte?: String;
  exchange_contains?: String;
  exchange_not_contains?: String;
  exchange_starts_with?: String;
  exchange_not_starts_with?: String;
  exchange_ends_with?: String;
  exchange_not_ends_with?: String;
  contract_name?: String;
  contract_name_not?: String;
  contract_name_in?: String[] | String;
  contract_name_not_in?: String[] | String;
  contract_name_lt?: String;
  contract_name_lte?: String;
  contract_name_gt?: String;
  contract_name_gte?: String;
  contract_name_contains?: String;
  contract_name_not_contains?: String;
  contract_name_starts_with?: String;
  contract_name_not_starts_with?: String;
  contract_name_ends_with?: String;
  contract_name_not_ends_with?: String;
  contract_type?: String;
  contract_type_not?: String;
  contract_type_in?: String[] | String;
  contract_type_not_in?: String[] | String;
  contract_type_lt?: String;
  contract_type_lte?: String;
  contract_type_gt?: String;
  contract_type_gte?: String;
  contract_type_contains?: String;
  contract_type_not_contains?: String;
  contract_type_starts_with?: String;
  contract_type_not_starts_with?: String;
  contract_type_ends_with?: String;
  contract_type_not_ends_with?: String;
  closeout_type?: String;
  closeout_type_not?: String;
  closeout_type_in?: String[] | String;
  closeout_type_not_in?: String[] | String;
  closeout_type_lt?: String;
  closeout_type_lte?: String;
  closeout_type_gt?: String;
  closeout_type_gte?: String;
  closeout_type_contains?: String;
  closeout_type_not_contains?: String;
  closeout_type_starts_with?: String;
  closeout_type_not_starts_with?: String;
  closeout_type_ends_with?: String;
  closeout_type_not_ends_with?: String;
  contract_price?: String;
  contract_price_not?: String;
  contract_price_in?: String[] | String;
  contract_price_not_in?: String[] | String;
  contract_price_lt?: String;
  contract_price_lte?: String;
  contract_price_gt?: String;
  contract_price_gte?: String;
  contract_price_contains?: String;
  contract_price_not_contains?: String;
  contract_price_starts_with?: String;
  contract_price_not_starts_with?: String;
  contract_price_ends_with?: String;
  contract_price_not_ends_with?: String;
  amount?: String;
  amount_not?: String;
  amount_in?: String[] | String;
  amount_not_in?: String[] | String;
  amount_lt?: String;
  amount_lte?: String;
  amount_gt?: String;
  amount_gte?: String;
  amount_contains?: String;
  amount_not_contains?: String;
  amount_starts_with?: String;
  amount_not_starts_with?: String;
  amount_ends_with?: String;
  amount_not_ends_with?: String;
  AND?: margincloseoutWhereInput[] | margincloseoutWhereInput;
  OR?: margincloseoutWhereInput[] | margincloseoutWhereInput;
  NOT?: margincloseoutWhereInput[] | margincloseoutWhereInput;
}

export interface onchainWhereInput {
  from?: String;
  from_not?: String;
  from_in?: String[] | String;
  from_not_in?: String[] | String;
  from_lt?: String;
  from_lte?: String;
  from_gt?: String;
  from_gte?: String;
  from_contains?: String;
  from_not_contains?: String;
  from_starts_with?: String;
  from_not_starts_with?: String;
  from_ends_with?: String;
  from_not_ends_with?: String;
  to?: String;
  to_not?: String;
  to_in?: String[] | String;
  to_not_in?: String[] | String;
  to_lt?: String;
  to_lte?: String;
  to_gt?: String;
  to_gte?: String;
  to_contains?: String;
  to_not_contains?: String;
  to_starts_with?: String;
  to_not_starts_with?: String;
  to_ends_with?: String;
  to_not_ends_with?: String;
  amount?: String;
  amount_not?: String;
  amount_in?: String[] | String;
  amount_not_in?: String[] | String;
  amount_lt?: String;
  amount_lte?: String;
  amount_gt?: String;
  amount_gte?: String;
  amount_contains?: String;
  amount_not_contains?: String;
  amount_starts_with?: String;
  amount_not_starts_with?: String;
  amount_ends_with?: String;
  amount_not_ends_with?: String;
  timestamp?: Int;
  timestamp_not?: Int;
  timestamp_in?: Int[] | Int;
  timestamp_not_in?: Int[] | Int;
  timestamp_lt?: Int;
  timestamp_lte?: Int;
  timestamp_gt?: Int;
  timestamp_gte?: Int;
  AND?: onchainWhereInput[] | onchainWhereInput;
  OR?: onchainWhereInput[] | onchainWhereInput;
  NOT?: onchainWhereInput[] | onchainWhereInput;
}

export type rateWhereUniqueInput = AtLeastOne<{
  key: String;
}>;

export interface rateWhereInput {
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  AND?: rateWhereInput[] | rateWhereInput;
  OR?: rateWhereInput[] | rateWhereInput;
  NOT?: rateWhereInput[] | rateWhereInput;
}

export interface FollowCreateInput {
  follower: String;
  leader: String;
}

export interface FollowUpdateManyMutationInput {
  follower?: String;
  leader?: String;
}

export interface KOLCreateInput {
  long: Int;
  short: Int;
}

export interface KOLUpdateManyMutationInput {
  long?: Int;
  short?: Int;
}

export interface MomentCreateInput {
  user?: UserCreateOneWithoutMomentInput;
  title?: String;
  content?: String;
}

export interface UserCreateOneWithoutMomentInput {
  create?: UserCreateWithoutMomentInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutMomentInput {
  phoneNumber: String;
  nickName: String;
  address?: String;
  introduction: String;
  apiKey?: String;
  apiSecret?: String;
  passPhrase?: String;
}

export interface MomentUpdateManyMutationInput {
  title?: String;
  content?: String;
}

export interface TokenCreateInput {
  tokenID: ID_Input;
  tokenName: String;
  isCopycat: String;
}

export interface TokenUpdateInput {
  tokenID?: ID_Input;
  tokenName?: String;
  isCopycat?: String;
}

export interface TokenUpdateManyMutationInput {
  tokenID?: ID_Input;
  tokenName?: String;
  isCopycat?: String;
}

export interface TransactionsCreateInput {
  from: String;
  to: String;
  value: String;
  type: String;
}

export interface TransactionsUpdateManyMutationInput {
  from?: String;
  to?: String;
  value?: String;
  type?: String;
}

export interface UserCreateInput {
  phoneNumber: String;
  nickName: String;
  address?: String;
  introduction: String;
  moment?: MomentCreateOneWithoutUserInput;
  apiKey?: String;
  apiSecret?: String;
  passPhrase?: String;
}

export interface MomentCreateOneWithoutUserInput {
  create?: MomentCreateWithoutUserInput;
}

export interface MomentCreateWithoutUserInput {
  title?: String;
  content?: String;
}

export interface UserUpdateInput {
  phoneNumber?: String;
  nickName?: String;
  address?: String;
  introduction?: String;
  moment?: MomentUpdateOneWithoutUserInput;
  apiKey?: String;
  apiSecret?: String;
  passPhrase?: String;
}

export interface MomentUpdateOneWithoutUserInput {
  create?: MomentCreateWithoutUserInput;
  update?: MomentUpdateWithoutUserDataInput;
  upsert?: MomentUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface MomentUpdateWithoutUserDataInput {
  title?: String;
  content?: String;
}

export interface MomentUpsertWithoutUserInput {
  update: MomentUpdateWithoutUserDataInput;
  create: MomentCreateWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  phoneNumber?: String;
  nickName?: String;
  address?: String;
  introduction?: String;
  apiKey?: String;
  apiSecret?: String;
  passPhrase?: String;
}

export interface contractCreateInput {
  long: Int;
  short: Int;
}

export interface contractUpdateManyMutationInput {
  long?: Int;
  short?: Int;
}

export interface margincloseoutCreateInput {
  timestamp: Int;
  exchange: String;
  contract_name: String;
  contract_type: String;
  closeout_type: String;
  contract_price: String;
  amount: String;
}

export interface margincloseoutUpdateManyMutationInput {
  timestamp?: Int;
  exchange?: String;
  contract_name?: String;
  contract_type?: String;
  closeout_type?: String;
  contract_price?: String;
  amount?: String;
}

export interface onchainCreateInput {
  from: String;
  to: String;
  amount: String;
  timestamp: Int;
}

export interface onchainUpdateManyMutationInput {
  from?: String;
  to?: String;
  amount?: String;
  timestamp?: Int;
}

export interface rateCreateInput {
  key?: String;
  value?: String;
}

export interface rateUpdateInput {
  key?: String;
  value?: String;
}

export interface rateUpdateManyMutationInput {
  key?: String;
  value?: String;
}

export interface FollowSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FollowWhereInput;
  AND?: FollowSubscriptionWhereInput[] | FollowSubscriptionWhereInput;
  OR?: FollowSubscriptionWhereInput[] | FollowSubscriptionWhereInput;
  NOT?: FollowSubscriptionWhereInput[] | FollowSubscriptionWhereInput;
}

export interface KOLSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: KOLWhereInput;
  AND?: KOLSubscriptionWhereInput[] | KOLSubscriptionWhereInput;
  OR?: KOLSubscriptionWhereInput[] | KOLSubscriptionWhereInput;
  NOT?: KOLSubscriptionWhereInput[] | KOLSubscriptionWhereInput;
}

export interface MomentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MomentWhereInput;
  AND?: MomentSubscriptionWhereInput[] | MomentSubscriptionWhereInput;
  OR?: MomentSubscriptionWhereInput[] | MomentSubscriptionWhereInput;
  NOT?: MomentSubscriptionWhereInput[] | MomentSubscriptionWhereInput;
}

export interface TokenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TokenWhereInput;
  AND?: TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput;
  OR?: TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput;
  NOT?: TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput;
}

export interface TransactionsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TransactionsWhereInput;
  AND?:
    | TransactionsSubscriptionWhereInput[]
    | TransactionsSubscriptionWhereInput;
  OR?:
    | TransactionsSubscriptionWhereInput[]
    | TransactionsSubscriptionWhereInput;
  NOT?:
    | TransactionsSubscriptionWhereInput[]
    | TransactionsSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface contractSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: contractWhereInput;
  AND?: contractSubscriptionWhereInput[] | contractSubscriptionWhereInput;
  OR?: contractSubscriptionWhereInput[] | contractSubscriptionWhereInput;
  NOT?: contractSubscriptionWhereInput[] | contractSubscriptionWhereInput;
}

export interface margincloseoutSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: margincloseoutWhereInput;
  AND?:
    | margincloseoutSubscriptionWhereInput[]
    | margincloseoutSubscriptionWhereInput;
  OR?:
    | margincloseoutSubscriptionWhereInput[]
    | margincloseoutSubscriptionWhereInput;
  NOT?:
    | margincloseoutSubscriptionWhereInput[]
    | margincloseoutSubscriptionWhereInput;
}

export interface onchainSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: onchainWhereInput;
  AND?: onchainSubscriptionWhereInput[] | onchainSubscriptionWhereInput;
  OR?: onchainSubscriptionWhereInput[] | onchainSubscriptionWhereInput;
  NOT?: onchainSubscriptionWhereInput[] | onchainSubscriptionWhereInput;
}

export interface rateSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: rateWhereInput;
  AND?: rateSubscriptionWhereInput[] | rateSubscriptionWhereInput;
  OR?: rateSubscriptionWhereInput[] | rateSubscriptionWhereInput;
  NOT?: rateSubscriptionWhereInput[] | rateSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Follow {
  follower: String;
  leader: String;
}

export interface FollowPromise extends Promise<Follow>, Fragmentable {
  follower: () => Promise<String>;
  leader: () => Promise<String>;
}

export interface FollowSubscription
  extends Promise<AsyncIterator<Follow>>,
    Fragmentable {
  follower: () => Promise<AsyncIterator<String>>;
  leader: () => Promise<AsyncIterator<String>>;
}

export interface FollowConnection {
  pageInfo: PageInfo;
  edges: FollowEdge[];
}

export interface FollowConnectionPromise
  extends Promise<FollowConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FollowEdge>>() => T;
  aggregate: <T = AggregateFollowPromise>() => T;
}

export interface FollowConnectionSubscription
  extends Promise<AsyncIterator<FollowConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FollowEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFollowSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface FollowEdge {
  node: Follow;
  cursor: String;
}

export interface FollowEdgePromise extends Promise<FollowEdge>, Fragmentable {
  node: <T = FollowPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FollowEdgeSubscription
  extends Promise<AsyncIterator<FollowEdge>>,
    Fragmentable {
  node: <T = FollowSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFollow {
  count: Int;
}

export interface AggregateFollowPromise
  extends Promise<AggregateFollow>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFollowSubscription
  extends Promise<AsyncIterator<AggregateFollow>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KOL {
  long: Int;
  short: Int;
}

export interface KOLPromise extends Promise<KOL>, Fragmentable {
  long: () => Promise<Int>;
  short: () => Promise<Int>;
}

export interface KOLSubscription
  extends Promise<AsyncIterator<KOL>>,
    Fragmentable {
  long: () => Promise<AsyncIterator<Int>>;
  short: () => Promise<AsyncIterator<Int>>;
}

export interface KOLConnection {
  pageInfo: PageInfo;
  edges: KOLEdge[];
}

export interface KOLConnectionPromise
  extends Promise<KOLConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KOLEdge>>() => T;
  aggregate: <T = AggregateKOLPromise>() => T;
}

export interface KOLConnectionSubscription
  extends Promise<AsyncIterator<KOLConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KOLEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKOLSubscription>() => T;
}

export interface KOLEdge {
  node: KOL;
  cursor: String;
}

export interface KOLEdgePromise extends Promise<KOLEdge>, Fragmentable {
  node: <T = KOLPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KOLEdgeSubscription
  extends Promise<AsyncIterator<KOLEdge>>,
    Fragmentable {
  node: <T = KOLSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKOL {
  count: Int;
}

export interface AggregateKOLPromise
  extends Promise<AggregateKOL>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKOLSubscription
  extends Promise<AsyncIterator<AggregateKOL>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Moment {
  createdAt: DateTimeOutput;
  title?: String;
  content?: String;
}

export interface MomentPromise extends Promise<Moment>, Fragmentable {
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface MomentSubscription
  extends Promise<AsyncIterator<Moment>>,
    Fragmentable {
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  phoneNumber: String;
  nickName: String;
  address?: String;
  introduction: String;
  apiKey?: String;
  apiSecret?: String;
  passPhrase?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  nickName: () => Promise<String>;
  address: () => Promise<String>;
  introduction: () => Promise<String>;
  moment: <T = MomentPromise>() => T;
  apiKey: () => Promise<String>;
  apiSecret: () => Promise<String>;
  passPhrase: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  nickName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  introduction: () => Promise<AsyncIterator<String>>;
  moment: <T = MomentSubscription>() => T;
  apiKey: () => Promise<AsyncIterator<String>>;
  apiSecret: () => Promise<AsyncIterator<String>>;
  passPhrase: () => Promise<AsyncIterator<String>>;
}

export interface MomentConnection {
  pageInfo: PageInfo;
  edges: MomentEdge[];
}

export interface MomentConnectionPromise
  extends Promise<MomentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MomentEdge>>() => T;
  aggregate: <T = AggregateMomentPromise>() => T;
}

export interface MomentConnectionSubscription
  extends Promise<AsyncIterator<MomentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MomentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMomentSubscription>() => T;
}

export interface MomentEdge {
  node: Moment;
  cursor: String;
}

export interface MomentEdgePromise extends Promise<MomentEdge>, Fragmentable {
  node: <T = MomentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MomentEdgeSubscription
  extends Promise<AsyncIterator<MomentEdge>>,
    Fragmentable {
  node: <T = MomentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMoment {
  count: Int;
}

export interface AggregateMomentPromise
  extends Promise<AggregateMoment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMomentSubscription
  extends Promise<AsyncIterator<AggregateMoment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Token {
  tokenID: ID_Output;
  tokenName: String;
  isCopycat: String;
}

export interface TokenPromise extends Promise<Token>, Fragmentable {
  tokenID: () => Promise<ID_Output>;
  tokenName: () => Promise<String>;
  isCopycat: () => Promise<String>;
}

export interface TokenSubscription
  extends Promise<AsyncIterator<Token>>,
    Fragmentable {
  tokenID: () => Promise<AsyncIterator<ID_Output>>;
  tokenName: () => Promise<AsyncIterator<String>>;
  isCopycat: () => Promise<AsyncIterator<String>>;
}

export interface TokenConnection {
  pageInfo: PageInfo;
  edges: TokenEdge[];
}

export interface TokenConnectionPromise
  extends Promise<TokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TokenEdge>>() => T;
  aggregate: <T = AggregateTokenPromise>() => T;
}

export interface TokenConnectionSubscription
  extends Promise<AsyncIterator<TokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTokenSubscription>() => T;
}

export interface TokenEdge {
  node: Token;
  cursor: String;
}

export interface TokenEdgePromise extends Promise<TokenEdge>, Fragmentable {
  node: <T = TokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TokenEdgeSubscription
  extends Promise<AsyncIterator<TokenEdge>>,
    Fragmentable {
  node: <T = TokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateToken {
  count: Int;
}

export interface AggregateTokenPromise
  extends Promise<AggregateToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTokenSubscription
  extends Promise<AsyncIterator<AggregateToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Transactions {
  from: String;
  to: String;
  value: String;
  type: String;
}

export interface TransactionsPromise
  extends Promise<Transactions>,
    Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<String>;
}

export interface TransactionsSubscription
  extends Promise<AsyncIterator<Transactions>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface TransactionsConnection {
  pageInfo: PageInfo;
  edges: TransactionsEdge[];
}

export interface TransactionsConnectionPromise
  extends Promise<TransactionsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TransactionsEdge>>() => T;
  aggregate: <T = AggregateTransactionsPromise>() => T;
}

export interface TransactionsConnectionSubscription
  extends Promise<AsyncIterator<TransactionsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TransactionsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTransactionsSubscription>() => T;
}

export interface TransactionsEdge {
  node: Transactions;
  cursor: String;
}

export interface TransactionsEdgePromise
  extends Promise<TransactionsEdge>,
    Fragmentable {
  node: <T = TransactionsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TransactionsEdgeSubscription
  extends Promise<AsyncIterator<TransactionsEdge>>,
    Fragmentable {
  node: <T = TransactionsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTransactions {
  count: Int;
}

export interface AggregateTransactionsPromise
  extends Promise<AggregateTransactions>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTransactionsSubscription
  extends Promise<AsyncIterator<AggregateTransactions>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface contract {
  long: Int;
  short: Int;
}

export interface contractPromise extends Promise<contract>, Fragmentable {
  long: () => Promise<Int>;
  short: () => Promise<Int>;
}

export interface contractSubscription
  extends Promise<AsyncIterator<contract>>,
    Fragmentable {
  long: () => Promise<AsyncIterator<Int>>;
  short: () => Promise<AsyncIterator<Int>>;
}

export interface contractConnection {
  pageInfo: PageInfo;
  edges: contractEdge[];
}

export interface contractConnectionPromise
  extends Promise<contractConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<contractEdge>>() => T;
  aggregate: <T = AggregatecontractPromise>() => T;
}

export interface contractConnectionSubscription
  extends Promise<AsyncIterator<contractConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<contractEdgeSubscription>>>() => T;
  aggregate: <T = AggregatecontractSubscription>() => T;
}

export interface contractEdge {
  node: contract;
  cursor: String;
}

export interface contractEdgePromise
  extends Promise<contractEdge>,
    Fragmentable {
  node: <T = contractPromise>() => T;
  cursor: () => Promise<String>;
}

export interface contractEdgeSubscription
  extends Promise<AsyncIterator<contractEdge>>,
    Fragmentable {
  node: <T = contractSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregatecontract {
  count: Int;
}

export interface AggregatecontractPromise
  extends Promise<Aggregatecontract>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatecontractSubscription
  extends Promise<AsyncIterator<Aggregatecontract>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface margincloseout {
  timestamp: Int;
  exchange: String;
  contract_name: String;
  contract_type: String;
  closeout_type: String;
  contract_price: String;
  amount: String;
}

export interface margincloseoutPromise
  extends Promise<margincloseout>,
    Fragmentable {
  timestamp: () => Promise<Int>;
  exchange: () => Promise<String>;
  contract_name: () => Promise<String>;
  contract_type: () => Promise<String>;
  closeout_type: () => Promise<String>;
  contract_price: () => Promise<String>;
  amount: () => Promise<String>;
}

export interface margincloseoutSubscription
  extends Promise<AsyncIterator<margincloseout>>,
    Fragmentable {
  timestamp: () => Promise<AsyncIterator<Int>>;
  exchange: () => Promise<AsyncIterator<String>>;
  contract_name: () => Promise<AsyncIterator<String>>;
  contract_type: () => Promise<AsyncIterator<String>>;
  closeout_type: () => Promise<AsyncIterator<String>>;
  contract_price: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<String>>;
}

export interface margincloseoutConnection {
  pageInfo: PageInfo;
  edges: margincloseoutEdge[];
}

export interface margincloseoutConnectionPromise
  extends Promise<margincloseoutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<margincloseoutEdge>>() => T;
  aggregate: <T = AggregatemargincloseoutPromise>() => T;
}

export interface margincloseoutConnectionSubscription
  extends Promise<AsyncIterator<margincloseoutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<margincloseoutEdgeSubscription>>>() => T;
  aggregate: <T = AggregatemargincloseoutSubscription>() => T;
}

export interface margincloseoutEdge {
  node: margincloseout;
  cursor: String;
}

export interface margincloseoutEdgePromise
  extends Promise<margincloseoutEdge>,
    Fragmentable {
  node: <T = margincloseoutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface margincloseoutEdgeSubscription
  extends Promise<AsyncIterator<margincloseoutEdge>>,
    Fragmentable {
  node: <T = margincloseoutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregatemargincloseout {
  count: Int;
}

export interface AggregatemargincloseoutPromise
  extends Promise<Aggregatemargincloseout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatemargincloseoutSubscription
  extends Promise<AsyncIterator<Aggregatemargincloseout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface onchain {
  from: String;
  to: String;
  amount: String;
  timestamp: Int;
}

export interface onchainPromise extends Promise<onchain>, Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
  amount: () => Promise<String>;
  timestamp: () => Promise<Int>;
}

export interface onchainSubscription
  extends Promise<AsyncIterator<onchain>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
}

export interface onchainConnection {
  pageInfo: PageInfo;
  edges: onchainEdge[];
}

export interface onchainConnectionPromise
  extends Promise<onchainConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<onchainEdge>>() => T;
  aggregate: <T = AggregateonchainPromise>() => T;
}

export interface onchainConnectionSubscription
  extends Promise<AsyncIterator<onchainConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<onchainEdgeSubscription>>>() => T;
  aggregate: <T = AggregateonchainSubscription>() => T;
}

export interface onchainEdge {
  node: onchain;
  cursor: String;
}

export interface onchainEdgePromise extends Promise<onchainEdge>, Fragmentable {
  node: <T = onchainPromise>() => T;
  cursor: () => Promise<String>;
}

export interface onchainEdgeSubscription
  extends Promise<AsyncIterator<onchainEdge>>,
    Fragmentable {
  node: <T = onchainSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregateonchain {
  count: Int;
}

export interface AggregateonchainPromise
  extends Promise<Aggregateonchain>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateonchainSubscription
  extends Promise<AsyncIterator<Aggregateonchain>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface rate {
  key?: String;
  value?: String;
}

export interface ratePromise extends Promise<rate>, Fragmentable {
  key: () => Promise<String>;
  value: () => Promise<String>;
}

export interface rateSubscription
  extends Promise<AsyncIterator<rate>>,
    Fragmentable {
  key: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface rateConnection {
  pageInfo: PageInfo;
  edges: rateEdge[];
}

export interface rateConnectionPromise
  extends Promise<rateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<rateEdge>>() => T;
  aggregate: <T = AggregateratePromise>() => T;
}

export interface rateConnectionSubscription
  extends Promise<AsyncIterator<rateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<rateEdgeSubscription>>>() => T;
  aggregate: <T = AggregaterateSubscription>() => T;
}

export interface rateEdge {
  node: rate;
  cursor: String;
}

export interface rateEdgePromise extends Promise<rateEdge>, Fragmentable {
  node: <T = ratePromise>() => T;
  cursor: () => Promise<String>;
}

export interface rateEdgeSubscription
  extends Promise<AsyncIterator<rateEdge>>,
    Fragmentable {
  node: <T = rateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregaterate {
  count: Int;
}

export interface AggregateratePromise
  extends Promise<Aggregaterate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregaterateSubscription
  extends Promise<AsyncIterator<Aggregaterate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FollowSubscriptionPayload {
  mutation: MutationType;
  node: Follow;
  updatedFields: String[];
  previousValues: FollowPreviousValues;
}

export interface FollowSubscriptionPayloadPromise
  extends Promise<FollowSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FollowPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FollowPreviousValuesPromise>() => T;
}

export interface FollowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FollowSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FollowSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FollowPreviousValuesSubscription>() => T;
}

export interface FollowPreviousValues {
  follower: String;
  leader: String;
}

export interface FollowPreviousValuesPromise
  extends Promise<FollowPreviousValues>,
    Fragmentable {
  follower: () => Promise<String>;
  leader: () => Promise<String>;
}

export interface FollowPreviousValuesSubscription
  extends Promise<AsyncIterator<FollowPreviousValues>>,
    Fragmentable {
  follower: () => Promise<AsyncIterator<String>>;
  leader: () => Promise<AsyncIterator<String>>;
}

export interface KOLSubscriptionPayload {
  mutation: MutationType;
  node: KOL;
  updatedFields: String[];
  previousValues: KOLPreviousValues;
}

export interface KOLSubscriptionPayloadPromise
  extends Promise<KOLSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KOLPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KOLPreviousValuesPromise>() => T;
}

export interface KOLSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KOLSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KOLSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KOLPreviousValuesSubscription>() => T;
}

export interface KOLPreviousValues {
  long: Int;
  short: Int;
}

export interface KOLPreviousValuesPromise
  extends Promise<KOLPreviousValues>,
    Fragmentable {
  long: () => Promise<Int>;
  short: () => Promise<Int>;
}

export interface KOLPreviousValuesSubscription
  extends Promise<AsyncIterator<KOLPreviousValues>>,
    Fragmentable {
  long: () => Promise<AsyncIterator<Int>>;
  short: () => Promise<AsyncIterator<Int>>;
}

export interface MomentSubscriptionPayload {
  mutation: MutationType;
  node: Moment;
  updatedFields: String[];
  previousValues: MomentPreviousValues;
}

export interface MomentSubscriptionPayloadPromise
  extends Promise<MomentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MomentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MomentPreviousValuesPromise>() => T;
}

export interface MomentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MomentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MomentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MomentPreviousValuesSubscription>() => T;
}

export interface MomentPreviousValues {
  createdAt: DateTimeOutput;
  title?: String;
  content?: String;
}

export interface MomentPreviousValuesPromise
  extends Promise<MomentPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface MomentPreviousValuesSubscription
  extends Promise<AsyncIterator<MomentPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface TokenSubscriptionPayload {
  mutation: MutationType;
  node: Token;
  updatedFields: String[];
  previousValues: TokenPreviousValues;
}

export interface TokenSubscriptionPayloadPromise
  extends Promise<TokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TokenPreviousValuesPromise>() => T;
}

export interface TokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TokenPreviousValuesSubscription>() => T;
}

export interface TokenPreviousValues {
  tokenID: ID_Output;
  tokenName: String;
  isCopycat: String;
}

export interface TokenPreviousValuesPromise
  extends Promise<TokenPreviousValues>,
    Fragmentable {
  tokenID: () => Promise<ID_Output>;
  tokenName: () => Promise<String>;
  isCopycat: () => Promise<String>;
}

export interface TokenPreviousValuesSubscription
  extends Promise<AsyncIterator<TokenPreviousValues>>,
    Fragmentable {
  tokenID: () => Promise<AsyncIterator<ID_Output>>;
  tokenName: () => Promise<AsyncIterator<String>>;
  isCopycat: () => Promise<AsyncIterator<String>>;
}

export interface TransactionsSubscriptionPayload {
  mutation: MutationType;
  node: Transactions;
  updatedFields: String[];
  previousValues: TransactionsPreviousValues;
}

export interface TransactionsSubscriptionPayloadPromise
  extends Promise<TransactionsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TransactionsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TransactionsPreviousValuesPromise>() => T;
}

export interface TransactionsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TransactionsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TransactionsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TransactionsPreviousValuesSubscription>() => T;
}

export interface TransactionsPreviousValues {
  from: String;
  to: String;
  value: String;
  type: String;
}

export interface TransactionsPreviousValuesPromise
  extends Promise<TransactionsPreviousValues>,
    Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<String>;
}

export interface TransactionsPreviousValuesSubscription
  extends Promise<AsyncIterator<TransactionsPreviousValues>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  phoneNumber: String;
  nickName: String;
  address?: String;
  introduction: String;
  apiKey?: String;
  apiSecret?: String;
  passPhrase?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  nickName: () => Promise<String>;
  address: () => Promise<String>;
  introduction: () => Promise<String>;
  apiKey: () => Promise<String>;
  apiSecret: () => Promise<String>;
  passPhrase: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  nickName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  introduction: () => Promise<AsyncIterator<String>>;
  apiKey: () => Promise<AsyncIterator<String>>;
  apiSecret: () => Promise<AsyncIterator<String>>;
  passPhrase: () => Promise<AsyncIterator<String>>;
}

export interface contractSubscriptionPayload {
  mutation: MutationType;
  node: contract;
  updatedFields: String[];
  previousValues: contractPreviousValues;
}

export interface contractSubscriptionPayloadPromise
  extends Promise<contractSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = contractPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = contractPreviousValuesPromise>() => T;
}

export interface contractSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<contractSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = contractSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = contractPreviousValuesSubscription>() => T;
}

export interface contractPreviousValues {
  long: Int;
  short: Int;
}

export interface contractPreviousValuesPromise
  extends Promise<contractPreviousValues>,
    Fragmentable {
  long: () => Promise<Int>;
  short: () => Promise<Int>;
}

export interface contractPreviousValuesSubscription
  extends Promise<AsyncIterator<contractPreviousValues>>,
    Fragmentable {
  long: () => Promise<AsyncIterator<Int>>;
  short: () => Promise<AsyncIterator<Int>>;
}

export interface margincloseoutSubscriptionPayload {
  mutation: MutationType;
  node: margincloseout;
  updatedFields: String[];
  previousValues: margincloseoutPreviousValues;
}

export interface margincloseoutSubscriptionPayloadPromise
  extends Promise<margincloseoutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = margincloseoutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = margincloseoutPreviousValuesPromise>() => T;
}

export interface margincloseoutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<margincloseoutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = margincloseoutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = margincloseoutPreviousValuesSubscription>() => T;
}

export interface margincloseoutPreviousValues {
  timestamp: Int;
  exchange: String;
  contract_name: String;
  contract_type: String;
  closeout_type: String;
  contract_price: String;
  amount: String;
}

export interface margincloseoutPreviousValuesPromise
  extends Promise<margincloseoutPreviousValues>,
    Fragmentable {
  timestamp: () => Promise<Int>;
  exchange: () => Promise<String>;
  contract_name: () => Promise<String>;
  contract_type: () => Promise<String>;
  closeout_type: () => Promise<String>;
  contract_price: () => Promise<String>;
  amount: () => Promise<String>;
}

export interface margincloseoutPreviousValuesSubscription
  extends Promise<AsyncIterator<margincloseoutPreviousValues>>,
    Fragmentable {
  timestamp: () => Promise<AsyncIterator<Int>>;
  exchange: () => Promise<AsyncIterator<String>>;
  contract_name: () => Promise<AsyncIterator<String>>;
  contract_type: () => Promise<AsyncIterator<String>>;
  closeout_type: () => Promise<AsyncIterator<String>>;
  contract_price: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<String>>;
}

export interface onchainSubscriptionPayload {
  mutation: MutationType;
  node: onchain;
  updatedFields: String[];
  previousValues: onchainPreviousValues;
}

export interface onchainSubscriptionPayloadPromise
  extends Promise<onchainSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = onchainPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = onchainPreviousValuesPromise>() => T;
}

export interface onchainSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<onchainSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = onchainSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = onchainPreviousValuesSubscription>() => T;
}

export interface onchainPreviousValues {
  from: String;
  to: String;
  amount: String;
  timestamp: Int;
}

export interface onchainPreviousValuesPromise
  extends Promise<onchainPreviousValues>,
    Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
  amount: () => Promise<String>;
  timestamp: () => Promise<Int>;
}

export interface onchainPreviousValuesSubscription
  extends Promise<AsyncIterator<onchainPreviousValues>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<String>>;
  timestamp: () => Promise<AsyncIterator<Int>>;
}

export interface rateSubscriptionPayload {
  mutation: MutationType;
  node: rate;
  updatedFields: String[];
  previousValues: ratePreviousValues;
}

export interface rateSubscriptionPayloadPromise
  extends Promise<rateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ratePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ratePreviousValuesPromise>() => T;
}

export interface rateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<rateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = rateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ratePreviousValuesSubscription>() => T;
}

export interface ratePreviousValues {
  key?: String;
  value?: String;
}

export interface ratePreviousValuesPromise
  extends Promise<ratePreviousValues>,
    Fragmentable {
  key: () => Promise<String>;
  value: () => Promise<String>;
}

export interface ratePreviousValuesSubscription
  extends Promise<AsyncIterator<ratePreviousValues>>,
    Fragmentable {
  key: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Token",
    embedded: false
  },
  {
    name: "Follow",
    embedded: false
  },
  {
    name: "Transactions",
    embedded: false
  },
  {
    name: "Moment",
    embedded: false
  },
  {
    name: "rate",
    embedded: false
  },
  {
    name: "onchain",
    embedded: false
  },
  {
    name: "margincloseout",
    embedded: false
  },
  {
    name: "contract",
    embedded: false
  },
  {
    name: "KOL",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
