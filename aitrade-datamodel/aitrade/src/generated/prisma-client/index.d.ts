// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  token: (where?: TokenWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  follow: (where?: followWhereInput) => Promise<boolean>;
  transactions: (where?: transactionsWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  token: (where: TokenWhereUniqueInput) => TokenPromise;
  tokens: (
    args?: {
      where?: TokenWhereInput;
      orderBy?: TokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Token>;
  tokensConnection: (
    args?: {
      where?: TokenWhereInput;
      orderBy?: TokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TokenConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  follows: (
    args?: {
      where?: followWhereInput;
      orderBy?: followOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<follow>;
  followsConnection: (
    args?: {
      where?: followWhereInput;
      orderBy?: followOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => followConnectionPromise;
  transactionses: (
    args?: {
      where?: transactionsWhereInput;
      orderBy?: transactionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<transactions>;
  transactionsesConnection: (
    args?: {
      where?: transactionsWhereInput;
      orderBy?: transactionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => transactionsConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createToken: (data: TokenCreateInput) => TokenPromise;
  updateToken: (
    args: { data: TokenUpdateInput; where: TokenWhereUniqueInput }
  ) => TokenPromise;
  updateManyTokens: (
    args: { data: TokenUpdateManyMutationInput; where?: TokenWhereInput }
  ) => BatchPayloadPromise;
  upsertToken: (
    args: {
      where: TokenWhereUniqueInput;
      create: TokenCreateInput;
      update: TokenUpdateInput;
    }
  ) => TokenPromise;
  deleteToken: (where: TokenWhereUniqueInput) => TokenPromise;
  deleteManyTokens: (where?: TokenWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createfollow: (data: followCreateInput) => followPromise;
  updateManyfollows: (
    args: { data: followUpdateManyMutationInput; where?: followWhereInput }
  ) => BatchPayloadPromise;
  deleteManyfollows: (where?: followWhereInput) => BatchPayloadPromise;
  createtransactions: (data: transactionsCreateInput) => transactionsPromise;
  updateManytransactionses: (
    args: {
      data: transactionsUpdateManyMutationInput;
      where?: transactionsWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManytransactionses: (
    where?: transactionsWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  token: (
    where?: TokenSubscriptionWhereInput
  ) => TokenSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  follow: (
    where?: followSubscriptionWhereInput
  ) => followSubscriptionPayloadSubscription;
  transactions: (
    where?: transactionsSubscriptionWhereInput
  ) => transactionsSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TokenOrderByInput =
  | "tokenID_ASC"
  | "tokenID_DESC"
  | "tokenName_ASC"
  | "tokenName_DESC"
  | "isCopycat_ASC"
  | "isCopycat_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "nickName_ASC"
  | "nickName_DESC"
  | "address_ASC"
  | "address_DESC"
  | "introduction_ASC"
  | "introduction_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type followOrderByInput =
  | "follower_ASC"
  | "follower_DESC"
  | "leader_ASC"
  | "leader_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type transactionsOrderByInput =
  | "from_ASC"
  | "from_DESC"
  | "to_ASC"
  | "to_DESC"
  | "value_ASC"
  | "value_DESC"
  | "type_ASC"
  | "type_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type TokenWhereUniqueInput = AtLeastOne<{
  tokenID: ID_Input;
}>;

export interface TokenWhereInput {
  tokenID?: ID_Input;
  tokenID_not?: ID_Input;
  tokenID_in?: ID_Input[] | ID_Input;
  tokenID_not_in?: ID_Input[] | ID_Input;
  tokenID_lt?: ID_Input;
  tokenID_lte?: ID_Input;
  tokenID_gt?: ID_Input;
  tokenID_gte?: ID_Input;
  tokenID_contains?: ID_Input;
  tokenID_not_contains?: ID_Input;
  tokenID_starts_with?: ID_Input;
  tokenID_not_starts_with?: ID_Input;
  tokenID_ends_with?: ID_Input;
  tokenID_not_ends_with?: ID_Input;
  tokenName?: String;
  tokenName_not?: String;
  tokenName_in?: String[] | String;
  tokenName_not_in?: String[] | String;
  tokenName_lt?: String;
  tokenName_lte?: String;
  tokenName_gt?: String;
  tokenName_gte?: String;
  tokenName_contains?: String;
  tokenName_not_contains?: String;
  tokenName_starts_with?: String;
  tokenName_not_starts_with?: String;
  tokenName_ends_with?: String;
  tokenName_not_ends_with?: String;
  isCopycat?: String;
  isCopycat_not?: String;
  isCopycat_in?: String[] | String;
  isCopycat_not_in?: String[] | String;
  isCopycat_lt?: String;
  isCopycat_lte?: String;
  isCopycat_gt?: String;
  isCopycat_gte?: String;
  isCopycat_contains?: String;
  isCopycat_not_contains?: String;
  isCopycat_starts_with?: String;
  isCopycat_not_starts_with?: String;
  isCopycat_ends_with?: String;
  isCopycat_not_ends_with?: String;
  AND?: TokenWhereInput[] | TokenWhereInput;
  OR?: TokenWhereInput[] | TokenWhereInput;
  NOT?: TokenWhereInput[] | TokenWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  phoneNumber?: String;
  phoneNumber_not?: String;
  phoneNumber_in?: String[] | String;
  phoneNumber_not_in?: String[] | String;
  phoneNumber_lt?: String;
  phoneNumber_lte?: String;
  phoneNumber_gt?: String;
  phoneNumber_gte?: String;
  phoneNumber_contains?: String;
  phoneNumber_not_contains?: String;
  phoneNumber_starts_with?: String;
  phoneNumber_not_starts_with?: String;
  phoneNumber_ends_with?: String;
  phoneNumber_not_ends_with?: String;
  nickName?: String;
  nickName_not?: String;
  nickName_in?: String[] | String;
  nickName_not_in?: String[] | String;
  nickName_lt?: String;
  nickName_lte?: String;
  nickName_gt?: String;
  nickName_gte?: String;
  nickName_contains?: String;
  nickName_not_contains?: String;
  nickName_starts_with?: String;
  nickName_not_starts_with?: String;
  nickName_ends_with?: String;
  nickName_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  introduction?: String;
  introduction_not?: String;
  introduction_in?: String[] | String;
  introduction_not_in?: String[] | String;
  introduction_lt?: String;
  introduction_lte?: String;
  introduction_gt?: String;
  introduction_gte?: String;
  introduction_contains?: String;
  introduction_not_contains?: String;
  introduction_starts_with?: String;
  introduction_not_starts_with?: String;
  introduction_ends_with?: String;
  introduction_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface followWhereInput {
  follower?: String;
  follower_not?: String;
  follower_in?: String[] | String;
  follower_not_in?: String[] | String;
  follower_lt?: String;
  follower_lte?: String;
  follower_gt?: String;
  follower_gte?: String;
  follower_contains?: String;
  follower_not_contains?: String;
  follower_starts_with?: String;
  follower_not_starts_with?: String;
  follower_ends_with?: String;
  follower_not_ends_with?: String;
  leader?: String;
  leader_not?: String;
  leader_in?: String[] | String;
  leader_not_in?: String[] | String;
  leader_lt?: String;
  leader_lte?: String;
  leader_gt?: String;
  leader_gte?: String;
  leader_contains?: String;
  leader_not_contains?: String;
  leader_starts_with?: String;
  leader_not_starts_with?: String;
  leader_ends_with?: String;
  leader_not_ends_with?: String;
  AND?: followWhereInput[] | followWhereInput;
  OR?: followWhereInput[] | followWhereInput;
  NOT?: followWhereInput[] | followWhereInput;
}

export interface transactionsWhereInput {
  from?: String;
  from_not?: String;
  from_in?: String[] | String;
  from_not_in?: String[] | String;
  from_lt?: String;
  from_lte?: String;
  from_gt?: String;
  from_gte?: String;
  from_contains?: String;
  from_not_contains?: String;
  from_starts_with?: String;
  from_not_starts_with?: String;
  from_ends_with?: String;
  from_not_ends_with?: String;
  to?: String;
  to_not?: String;
  to_in?: String[] | String;
  to_not_in?: String[] | String;
  to_lt?: String;
  to_lte?: String;
  to_gt?: String;
  to_gte?: String;
  to_contains?: String;
  to_not_contains?: String;
  to_starts_with?: String;
  to_not_starts_with?: String;
  to_ends_with?: String;
  to_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  AND?: transactionsWhereInput[] | transactionsWhereInput;
  OR?: transactionsWhereInput[] | transactionsWhereInput;
  NOT?: transactionsWhereInput[] | transactionsWhereInput;
}

export interface TokenCreateInput {
  tokenID: ID_Input;
  tokenName: String;
  isCopycat: String;
}

export interface TokenUpdateInput {
  tokenID?: ID_Input;
  tokenName?: String;
  isCopycat?: String;
}

export interface TokenUpdateManyMutationInput {
  tokenID?: ID_Input;
  tokenName?: String;
  isCopycat?: String;
}

export interface UserCreateInput {
  phoneNumber: String;
  nickName: String;
  address?: String;
  introduction: String;
}

export interface UserUpdateInput {
  phoneNumber?: String;
  nickName?: String;
  address?: String;
  introduction?: String;
}

export interface UserUpdateManyMutationInput {
  phoneNumber?: String;
  nickName?: String;
  address?: String;
  introduction?: String;
}

export interface followCreateInput {
  follower: String;
  leader: String;
}

export interface followUpdateManyMutationInput {
  follower?: String;
  leader?: String;
}

export interface transactionsCreateInput {
  from: String;
  to: String;
  value: String;
  type: String;
}

export interface transactionsUpdateManyMutationInput {
  from?: String;
  to?: String;
  value?: String;
  type?: String;
}

export interface TokenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TokenWhereInput;
  AND?: TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput;
  OR?: TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput;
  NOT?: TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface followSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: followWhereInput;
  AND?: followSubscriptionWhereInput[] | followSubscriptionWhereInput;
  OR?: followSubscriptionWhereInput[] | followSubscriptionWhereInput;
  NOT?: followSubscriptionWhereInput[] | followSubscriptionWhereInput;
}

export interface transactionsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: transactionsWhereInput;
  AND?:
    | transactionsSubscriptionWhereInput[]
    | transactionsSubscriptionWhereInput;
  OR?:
    | transactionsSubscriptionWhereInput[]
    | transactionsSubscriptionWhereInput;
  NOT?:
    | transactionsSubscriptionWhereInput[]
    | transactionsSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Token {
  tokenID: ID_Output;
  tokenName: String;
  isCopycat: String;
}

export interface TokenPromise extends Promise<Token>, Fragmentable {
  tokenID: () => Promise<ID_Output>;
  tokenName: () => Promise<String>;
  isCopycat: () => Promise<String>;
}

export interface TokenSubscription
  extends Promise<AsyncIterator<Token>>,
    Fragmentable {
  tokenID: () => Promise<AsyncIterator<ID_Output>>;
  tokenName: () => Promise<AsyncIterator<String>>;
  isCopycat: () => Promise<AsyncIterator<String>>;
}

export interface TokenConnection {
  pageInfo: PageInfo;
  edges: TokenEdge[];
}

export interface TokenConnectionPromise
  extends Promise<TokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TokenEdge>>() => T;
  aggregate: <T = AggregateTokenPromise>() => T;
}

export interface TokenConnectionSubscription
  extends Promise<AsyncIterator<TokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTokenSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TokenEdge {
  node: Token;
  cursor: String;
}

export interface TokenEdgePromise extends Promise<TokenEdge>, Fragmentable {
  node: <T = TokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TokenEdgeSubscription
  extends Promise<AsyncIterator<TokenEdge>>,
    Fragmentable {
  node: <T = TokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateToken {
  count: Int;
}

export interface AggregateTokenPromise
  extends Promise<AggregateToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTokenSubscription
  extends Promise<AsyncIterator<AggregateToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  phoneNumber: String;
  nickName: String;
  address?: String;
  introduction: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  phoneNumber: () => Promise<String>;
  nickName: () => Promise<String>;
  address: () => Promise<String>;
  introduction: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  nickName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  introduction: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface follow {
  follower: String;
  leader: String;
}

export interface followPromise extends Promise<follow>, Fragmentable {
  follower: () => Promise<String>;
  leader: () => Promise<String>;
}

export interface followSubscription
  extends Promise<AsyncIterator<follow>>,
    Fragmentable {
  follower: () => Promise<AsyncIterator<String>>;
  leader: () => Promise<AsyncIterator<String>>;
}

export interface followConnection {
  pageInfo: PageInfo;
  edges: followEdge[];
}

export interface followConnectionPromise
  extends Promise<followConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<followEdge>>() => T;
  aggregate: <T = AggregatefollowPromise>() => T;
}

export interface followConnectionSubscription
  extends Promise<AsyncIterator<followConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<followEdgeSubscription>>>() => T;
  aggregate: <T = AggregatefollowSubscription>() => T;
}

export interface followEdge {
  node: follow;
  cursor: String;
}

export interface followEdgePromise extends Promise<followEdge>, Fragmentable {
  node: <T = followPromise>() => T;
  cursor: () => Promise<String>;
}

export interface followEdgeSubscription
  extends Promise<AsyncIterator<followEdge>>,
    Fragmentable {
  node: <T = followSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregatefollow {
  count: Int;
}

export interface AggregatefollowPromise
  extends Promise<Aggregatefollow>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatefollowSubscription
  extends Promise<AsyncIterator<Aggregatefollow>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface transactions {
  from: String;
  to: String;
  value: String;
  type: String;
}

export interface transactionsPromise
  extends Promise<transactions>,
    Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<String>;
}

export interface transactionsSubscription
  extends Promise<AsyncIterator<transactions>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface transactionsConnection {
  pageInfo: PageInfo;
  edges: transactionsEdge[];
}

export interface transactionsConnectionPromise
  extends Promise<transactionsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<transactionsEdge>>() => T;
  aggregate: <T = AggregatetransactionsPromise>() => T;
}

export interface transactionsConnectionSubscription
  extends Promise<AsyncIterator<transactionsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<transactionsEdgeSubscription>>>() => T;
  aggregate: <T = AggregatetransactionsSubscription>() => T;
}

export interface transactionsEdge {
  node: transactions;
  cursor: String;
}

export interface transactionsEdgePromise
  extends Promise<transactionsEdge>,
    Fragmentable {
  node: <T = transactionsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface transactionsEdgeSubscription
  extends Promise<AsyncIterator<transactionsEdge>>,
    Fragmentable {
  node: <T = transactionsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregatetransactions {
  count: Int;
}

export interface AggregatetransactionsPromise
  extends Promise<Aggregatetransactions>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatetransactionsSubscription
  extends Promise<AsyncIterator<Aggregatetransactions>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TokenSubscriptionPayload {
  mutation: MutationType;
  node: Token;
  updatedFields: String[];
  previousValues: TokenPreviousValues;
}

export interface TokenSubscriptionPayloadPromise
  extends Promise<TokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TokenPreviousValuesPromise>() => T;
}

export interface TokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TokenPreviousValuesSubscription>() => T;
}

export interface TokenPreviousValues {
  tokenID: ID_Output;
  tokenName: String;
  isCopycat: String;
}

export interface TokenPreviousValuesPromise
  extends Promise<TokenPreviousValues>,
    Fragmentable {
  tokenID: () => Promise<ID_Output>;
  tokenName: () => Promise<String>;
  isCopycat: () => Promise<String>;
}

export interface TokenPreviousValuesSubscription
  extends Promise<AsyncIterator<TokenPreviousValues>>,
    Fragmentable {
  tokenID: () => Promise<AsyncIterator<ID_Output>>;
  tokenName: () => Promise<AsyncIterator<String>>;
  isCopycat: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  phoneNumber: String;
  nickName: String;
  address?: String;
  introduction: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  phoneNumber: () => Promise<String>;
  nickName: () => Promise<String>;
  address: () => Promise<String>;
  introduction: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  nickName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  introduction: () => Promise<AsyncIterator<String>>;
}

export interface followSubscriptionPayload {
  mutation: MutationType;
  node: follow;
  updatedFields: String[];
  previousValues: followPreviousValues;
}

export interface followSubscriptionPayloadPromise
  extends Promise<followSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = followPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = followPreviousValuesPromise>() => T;
}

export interface followSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<followSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = followSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = followPreviousValuesSubscription>() => T;
}

export interface followPreviousValues {
  follower: String;
  leader: String;
}

export interface followPreviousValuesPromise
  extends Promise<followPreviousValues>,
    Fragmentable {
  follower: () => Promise<String>;
  leader: () => Promise<String>;
}

export interface followPreviousValuesSubscription
  extends Promise<AsyncIterator<followPreviousValues>>,
    Fragmentable {
  follower: () => Promise<AsyncIterator<String>>;
  leader: () => Promise<AsyncIterator<String>>;
}

export interface transactionsSubscriptionPayload {
  mutation: MutationType;
  node: transactions;
  updatedFields: String[];
  previousValues: transactionsPreviousValues;
}

export interface transactionsSubscriptionPayloadPromise
  extends Promise<transactionsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = transactionsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = transactionsPreviousValuesPromise>() => T;
}

export interface transactionsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<transactionsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = transactionsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = transactionsPreviousValuesSubscription>() => T;
}

export interface transactionsPreviousValues {
  from: String;
  to: String;
  value: String;
  type: String;
}

export interface transactionsPreviousValuesPromise
  extends Promise<transactionsPreviousValues>,
    Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<String>;
}

export interface transactionsPreviousValuesSubscription
  extends Promise<AsyncIterator<transactionsPreviousValues>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Token",
    embedded: false
  },
  {
    name: "follow",
    embedded: false
  },
  {
    name: "transactions",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
